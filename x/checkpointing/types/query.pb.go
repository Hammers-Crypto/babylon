// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/checkpointing/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRawCheckpointsRequest is the request type for the Query/RawCheckpoints
// RPC method.
type QueryRawCheckpointsRequest struct {
	// from_epoch defines the start epoch of the query, which is inclusive
	FromEpochNum uint64 `protobuf:"varint,1,opt,name=from_epoch_num,json=fromEpochNum,proto3" json:"from_epoch_num,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointsRequest) Reset()         { *m = QueryRawCheckpointsRequest{} }
func (m *QueryRawCheckpointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointsRequest) ProtoMessage()    {}
func (*QueryRawCheckpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{0}
}
func (m *QueryRawCheckpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointsRequest.Merge(m, src)
}
func (m *QueryRawCheckpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointsRequest proto.InternalMessageInfo

func (m *QueryRawCheckpointsRequest) GetFromEpochNum() uint64 {
	if m != nil {
		return m.FromEpochNum
	}
	return 0
}

func (m *QueryRawCheckpointsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRawCheckpointsResponse is the response type for the Query/RawCheckpoints
// RPC method.
type QueryRawCheckpointsResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	RawCheckpoints []*RawCheckpoint `protobuf:"bytes,1,rep,name=raw_checkpoints,json=rawCheckpoints,proto3" json:"raw_checkpoints,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointsResponse) Reset()         { *m = QueryRawCheckpointsResponse{} }
func (m *QueryRawCheckpointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointsResponse) ProtoMessage()    {}
func (*QueryRawCheckpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{1}
}
func (m *QueryRawCheckpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointsResponse.Merge(m, src)
}
func (m *QueryRawCheckpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointsResponse proto.InternalMessageInfo

func (m *QueryRawCheckpointsResponse) GetRawCheckpoints() []*RawCheckpoint {
	if m != nil {
		return m.RawCheckpoints
	}
	return nil
}

func (m *QueryRawCheckpointsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRawCheckpointRequest is the request type for the Query/RawCheckpoint
// RPC method.
type QueryRawCheckpointRequest struct {
	// epoch_num defines the epoch for the queried checkpoint
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
}

func (m *QueryRawCheckpointRequest) Reset()         { *m = QueryRawCheckpointRequest{} }
func (m *QueryRawCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointRequest) ProtoMessage()    {}
func (*QueryRawCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{2}
}
func (m *QueryRawCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointRequest.Merge(m, src)
}
func (m *QueryRawCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointRequest proto.InternalMessageInfo

func (m *QueryRawCheckpointRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

// QueryRawCheckpointResponse is the response type for the Query/RawCheckpoint
// RPC method.
type QueryRawCheckpointResponse struct {
	RawCheckpoint *RawCheckpoint `protobuf:"bytes,1,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
}

func (m *QueryRawCheckpointResponse) Reset()         { *m = QueryRawCheckpointResponse{} }
func (m *QueryRawCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointResponse) ProtoMessage()    {}
func (*QueryRawCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{3}
}
func (m *QueryRawCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointResponse.Merge(m, src)
}
func (m *QueryRawCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointResponse proto.InternalMessageInfo

func (m *QueryRawCheckpointResponse) GetRawCheckpoint() *RawCheckpoint {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

// QueryLatestCheckpointRequest is the request type for the Query/LatestCheckpoint
// RPC method.
type QueryLatestCheckpointRequest struct {
}

func (m *QueryLatestCheckpointRequest) Reset()         { *m = QueryLatestCheckpointRequest{} }
func (m *QueryLatestCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestCheckpointRequest) ProtoMessage()    {}
func (*QueryLatestCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{4}
}
func (m *QueryLatestCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestCheckpointRequest.Merge(m, src)
}
func (m *QueryLatestCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestCheckpointRequest proto.InternalMessageInfo

// QueryLatestCheckpointResponse is the response type for the Query/LatestCheckpoint
// RPC method.
type QueryLatestCheckpointResponse struct {
	LatestCheckpoint *RawCheckpoint `protobuf:"bytes,1,opt,name=latest_checkpoint,json=latestCheckpoint,proto3" json:"latest_checkpoint,omitempty"`
}

func (m *QueryLatestCheckpointResponse) Reset()         { *m = QueryLatestCheckpointResponse{} }
func (m *QueryLatestCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestCheckpointResponse) ProtoMessage()    {}
func (*QueryLatestCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{5}
}
func (m *QueryLatestCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestCheckpointResponse.Merge(m, src)
}
func (m *QueryLatestCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestCheckpointResponse proto.InternalMessageInfo

func (m *QueryLatestCheckpointResponse) GetLatestCheckpoint() *RawCheckpoint {
	if m != nil {
		return m.LatestCheckpoint
	}
	return nil
}

// QueryUncheckpointedCheckpointsRequest is the request type for the Query/UncheckpointedCheckpoints
// RPC method.
type QueryUncheckpointedCheckpointsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUncheckpointedCheckpointsRequest) Reset()         { *m = QueryUncheckpointedCheckpointsRequest{} }
func (m *QueryUncheckpointedCheckpointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUncheckpointedCheckpointsRequest) ProtoMessage()    {}
func (*QueryUncheckpointedCheckpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{6}
}
func (m *QueryUncheckpointedCheckpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUncheckpointedCheckpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUncheckpointedCheckpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUncheckpointedCheckpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUncheckpointedCheckpointsRequest.Merge(m, src)
}
func (m *QueryUncheckpointedCheckpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUncheckpointedCheckpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUncheckpointedCheckpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUncheckpointedCheckpointsRequest proto.InternalMessageInfo

func (m *QueryUncheckpointedCheckpointsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUncheckpointedCheckpointsResponse is the response type for the Query/UncheckpointedCheckpoints
// RPC method.
type QueryUncheckpointedCheckpointsResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	UncheckpointedCheckpoint []*RawCheckpoint `protobuf:"bytes,1,rep,name=uncheckpointed_checkpoint,json=uncheckpointedCheckpoint,proto3" json:"uncheckpointed_checkpoint,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUncheckpointedCheckpointsResponse) Reset() {
	*m = QueryUncheckpointedCheckpointsResponse{}
}
func (m *QueryUncheckpointedCheckpointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUncheckpointedCheckpointsResponse) ProtoMessage()    {}
func (*QueryUncheckpointedCheckpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{7}
}
func (m *QueryUncheckpointedCheckpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUncheckpointedCheckpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUncheckpointedCheckpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUncheckpointedCheckpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUncheckpointedCheckpointsResponse.Merge(m, src)
}
func (m *QueryUncheckpointedCheckpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUncheckpointedCheckpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUncheckpointedCheckpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUncheckpointedCheckpointsResponse proto.InternalMessageInfo

func (m *QueryUncheckpointedCheckpointsResponse) GetUncheckpointedCheckpoint() []*RawCheckpoint {
	if m != nil {
		return m.UncheckpointedCheckpoint
	}
	return nil
}

func (m *QueryUncheckpointedCheckpointsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUnderconfirmedCheckpointsRequest is the request type for the Query/UnderconfirmedCheckpoints
// RPC method.
type QueryUnderconfirmedCheckpointsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUnderconfirmedCheckpointsRequest) Reset()         { *m = QueryUnderconfirmedCheckpointsRequest{} }
func (m *QueryUnderconfirmedCheckpointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnderconfirmedCheckpointsRequest) ProtoMessage()    {}
func (*QueryUnderconfirmedCheckpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{8}
}
func (m *QueryUnderconfirmedCheckpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnderconfirmedCheckpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnderconfirmedCheckpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnderconfirmedCheckpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnderconfirmedCheckpointsRequest.Merge(m, src)
}
func (m *QueryUnderconfirmedCheckpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnderconfirmedCheckpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnderconfirmedCheckpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnderconfirmedCheckpointsRequest proto.InternalMessageInfo

func (m *QueryUnderconfirmedCheckpointsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUnderconfirmedCheckpointsResponse is the response type for the Query/UnderconfirmedCheckpoints
// RPC method.
type QueryUnderconfirmedCheckpointsResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	UnderconfirmedCheckpoint []*RawCheckpoint `protobuf:"bytes,1,rep,name=underconfirmed_checkpoint,json=underconfirmedCheckpoint,proto3" json:"underconfirmed_checkpoint,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUnderconfirmedCheckpointsResponse) Reset() {
	*m = QueryUnderconfirmedCheckpointsResponse{}
}
func (m *QueryUnderconfirmedCheckpointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnderconfirmedCheckpointsResponse) ProtoMessage()    {}
func (*QueryUnderconfirmedCheckpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{9}
}
func (m *QueryUnderconfirmedCheckpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnderconfirmedCheckpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnderconfirmedCheckpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnderconfirmedCheckpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnderconfirmedCheckpointsResponse.Merge(m, src)
}
func (m *QueryUnderconfirmedCheckpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnderconfirmedCheckpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnderconfirmedCheckpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnderconfirmedCheckpointsResponse proto.InternalMessageInfo

func (m *QueryUnderconfirmedCheckpointsResponse) GetUnderconfirmedCheckpoint() []*RawCheckpoint {
	if m != nil {
		return m.UnderconfirmedCheckpoint
	}
	return nil
}

func (m *QueryUnderconfirmedCheckpointsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConfirmedCheckpointsRequest is the request type for the Query/ConfirmedCheckpoints
// RPC method.
type QueryConfirmedCheckpointsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConfirmedCheckpointsRequest) Reset()         { *m = QueryConfirmedCheckpointsRequest{} }
func (m *QueryConfirmedCheckpointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConfirmedCheckpointsRequest) ProtoMessage()    {}
func (*QueryConfirmedCheckpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{10}
}
func (m *QueryConfirmedCheckpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfirmedCheckpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfirmedCheckpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfirmedCheckpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfirmedCheckpointsRequest.Merge(m, src)
}
func (m *QueryConfirmedCheckpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfirmedCheckpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfirmedCheckpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfirmedCheckpointsRequest proto.InternalMessageInfo

func (m *QueryConfirmedCheckpointsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConfirmedCheckpointsResponse is the response type for the Query/ConfirmedCheckpoints
// RPC method.
type QueryConfirmedCheckpointsResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	ConfirmedCheckpoint []*RawCheckpoint `protobuf:"bytes,1,rep,name=confirmed_checkpoint,json=confirmedCheckpoint,proto3" json:"confirmed_checkpoint,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConfirmedCheckpointsResponse) Reset()         { *m = QueryConfirmedCheckpointsResponse{} }
func (m *QueryConfirmedCheckpointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConfirmedCheckpointsResponse) ProtoMessage()    {}
func (*QueryConfirmedCheckpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{11}
}
func (m *QueryConfirmedCheckpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfirmedCheckpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfirmedCheckpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfirmedCheckpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfirmedCheckpointsResponse.Merge(m, src)
}
func (m *QueryConfirmedCheckpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfirmedCheckpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfirmedCheckpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfirmedCheckpointsResponse proto.InternalMessageInfo

func (m *QueryConfirmedCheckpointsResponse) GetConfirmedCheckpoint() []*RawCheckpoint {
	if m != nil {
		return m.ConfirmedCheckpoint
	}
	return nil
}

func (m *QueryConfirmedCheckpointsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlsSigsRequest is the request type for the Query/BlsSigs
// RPC method.
type QueryBlsSigsRequest struct {
	// epoch_num defines the epoch for the queried bls sigs
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlsSigsRequest) Reset()         { *m = QueryBlsSigsRequest{} }
func (m *QueryBlsSigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlsSigsRequest) ProtoMessage()    {}
func (*QueryBlsSigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{12}
}
func (m *QueryBlsSigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlsSigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlsSigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlsSigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlsSigsRequest.Merge(m, src)
}
func (m *QueryBlsSigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlsSigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlsSigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlsSigsRequest proto.InternalMessageInfo

func (m *QueryBlsSigsRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

func (m *QueryBlsSigsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlsSigsResponse is the response type for the Query/BlsSigs
// RPC method.
type QueryBlsSigsResponse struct {
	BlsSigs []*BlsSig `protobuf:"bytes,1,rep,name=bls_sigs,json=blsSigs,proto3" json:"bls_sigs,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlsSigsResponse) Reset()         { *m = QueryBlsSigsResponse{} }
func (m *QueryBlsSigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlsSigsResponse) ProtoMessage()    {}
func (*QueryBlsSigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{13}
}
func (m *QueryBlsSigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlsSigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlsSigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlsSigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlsSigsResponse.Merge(m, src)
}
func (m *QueryBlsSigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlsSigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlsSigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlsSigsResponse proto.InternalMessageInfo

func (m *QueryBlsSigsResponse) GetBlsSigs() []*BlsSig {
	if m != nil {
		return m.BlsSigs
	}
	return nil
}

func (m *QueryBlsSigsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0fdb8f0f85bb51e, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryRawCheckpointsRequest)(nil), "babylon.checkpointing.v1.QueryRawCheckpointsRequest")
	proto.RegisterType((*QueryRawCheckpointsResponse)(nil), "babylon.checkpointing.v1.QueryRawCheckpointsResponse")
	proto.RegisterType((*QueryRawCheckpointRequest)(nil), "babylon.checkpointing.v1.QueryRawCheckpointRequest")
	proto.RegisterType((*QueryRawCheckpointResponse)(nil), "babylon.checkpointing.v1.QueryRawCheckpointResponse")
	proto.RegisterType((*QueryLatestCheckpointRequest)(nil), "babylon.checkpointing.v1.QueryLatestCheckpointRequest")
	proto.RegisterType((*QueryLatestCheckpointResponse)(nil), "babylon.checkpointing.v1.QueryLatestCheckpointResponse")
	proto.RegisterType((*QueryUncheckpointedCheckpointsRequest)(nil), "babylon.checkpointing.v1.QueryUncheckpointedCheckpointsRequest")
	proto.RegisterType((*QueryUncheckpointedCheckpointsResponse)(nil), "babylon.checkpointing.v1.QueryUncheckpointedCheckpointsResponse")
	proto.RegisterType((*QueryUnderconfirmedCheckpointsRequest)(nil), "babylon.checkpointing.v1.QueryUnderconfirmedCheckpointsRequest")
	proto.RegisterType((*QueryUnderconfirmedCheckpointsResponse)(nil), "babylon.checkpointing.v1.QueryUnderconfirmedCheckpointsResponse")
	proto.RegisterType((*QueryConfirmedCheckpointsRequest)(nil), "babylon.checkpointing.v1.QueryConfirmedCheckpointsRequest")
	proto.RegisterType((*QueryConfirmedCheckpointsResponse)(nil), "babylon.checkpointing.v1.QueryConfirmedCheckpointsResponse")
	proto.RegisterType((*QueryBlsSigsRequest)(nil), "babylon.checkpointing.v1.QueryBlsSigsRequest")
	proto.RegisterType((*QueryBlsSigsResponse)(nil), "babylon.checkpointing.v1.QueryBlsSigsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.checkpointing.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.checkpointing.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("babylon/checkpointing/query.proto", fileDescriptor_a0fdb8f0f85bb51e) }

var fileDescriptor_a0fdb8f0f85bb51e = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x53, 0xdb, 0x46,
	0x18, 0xf5, 0x52, 0x0a, 0x74, 0x29, 0x2e, 0x5d, 0x7c, 0x30, 0x82, 0xba, 0x46, 0xd3, 0x82, 0xa7,
	0x2d, 0x52, 0xcd, 0xcf, 0x0e, 0x30, 0x6d, 0xc7, 0x4c, 0xdb, 0x4b, 0x87, 0x52, 0xb7, 0x5c, 0xb8,
	0x78, 0x24, 0x23, 0x64, 0xb5, 0xb6, 0x56, 0x68, 0x25, 0x28, 0x65, 0x72, 0xc9, 0x31, 0x97, 0x64,
	0x26, 0xd7, 0x1c, 0xf2, 0x67, 0x70, 0xcd, 0xcd, 0x47, 0x66, 0x72, 0x48, 0x0e, 0x99, 0x4c, 0x06,
	0xf2, 0x7f, 0x24, 0xe3, 0xd5, 0x0a, 0xb3, 0x46, 0x6b, 0xc9, 0xe0, 0x70, 0x13, 0xbb, 0xdf, 0xf7,
	0xbe, 0xf7, 0x9e, 0x96, 0x7d, 0x32, 0x9c, 0xd1, 0x35, 0xfd, 0xb8, 0x8e, 0x6d, 0xb5, 0x5a, 0x33,
	0xaa, 0xff, 0x3a, 0xd8, 0xb2, 0x3d, 0xcb, 0x36, 0xd5, 0x03, 0xdf, 0x70, 0x8f, 0x15, 0xc7, 0xc5,
	0x1e, 0x46, 0x59, 0x56, 0xa2, 0x70, 0x25, 0xca, 0x61, 0x51, 0xfa, 0xa6, 0x8a, 0x49, 0x03, 0x13,
	0x55, 0xd7, 0x88, 0x11, 0xb4, 0xa8, 0x87, 0x45, 0xdd, 0xf0, 0xb4, 0xa2, 0xea, 0x68, 0xa6, 0x65,
	0x6b, 0x9e, 0x85, 0xed, 0x00, 0x45, 0xca, 0x98, 0xd8, 0xc4, 0xf4, 0x51, 0x6d, 0x3d, 0xb1, 0xd5,
	0x69, 0x13, 0x63, 0xb3, 0x6e, 0xa8, 0x9a, 0x63, 0xa9, 0x9a, 0x6d, 0x63, 0x8f, 0xb6, 0x10, 0xb6,
	0x2b, 0x47, 0x93, 0x73, 0x34, 0x57, 0x6b, 0x84, 0x35, 0xb3, 0xd1, 0x35, 0xed, 0xbf, 0x82, 0x3a,
	0xf9, 0x01, 0x80, 0xd2, 0x9f, 0x2d, 0x8a, 0x65, 0xed, 0x68, 0xf3, 0x72, 0x93, 0x94, 0x8d, 0x03,
	0xdf, 0x20, 0x1e, 0xfa, 0x0a, 0xa6, 0xf7, 0x5d, 0xdc, 0xa8, 0x18, 0x0e, 0xae, 0xd6, 0x2a, 0xb6,
	0xdf, 0xc8, 0x82, 0x3c, 0x28, 0x0c, 0x96, 0x3f, 0x6d, 0xad, 0xfe, 0xd2, 0x5a, 0xdc, 0xf2, 0x1b,
	0xe8, 0x57, 0x08, 0xdb, 0xc2, 0xb2, 0x03, 0x79, 0x50, 0x18, 0x5d, 0x98, 0x55, 0x02, 0x17, 0x94,
	0x96, 0x0b, 0x4a, 0x60, 0x1c, 0x73, 0x41, 0xd9, 0xd6, 0x4c, 0x83, 0x4d, 0x28, 0x5f, 0xe9, 0x94,
	0x4f, 0x01, 0x9c, 0x8a, 0x24, 0x43, 0x1c, 0x6c, 0x13, 0x03, 0x6d, 0xc3, 0xcf, 0x5c, 0xed, 0xa8,
	0xd2, 0x16, 0x41, 0xb2, 0x20, 0xff, 0x51, 0x61, 0x74, 0x61, 0x4e, 0x11, 0xbd, 0x0c, 0x85, 0x83,
	0x2a, 0xa7, 0x5d, 0x0e, 0x19, 0xfd, 0x16, 0xc1, 0x7c, 0x2e, 0x96, 0x79, 0x40, 0x87, 0xa3, 0xfe,
	0x03, 0x9c, 0xbc, 0xce, 0x3c, 0x74, 0x71, 0x0a, 0x7e, 0xd2, 0x69, 0xe0, 0x88, 0xc1, 0xcc, 0x93,
	0xeb, 0x51, 0x2f, 0xe0, 0x52, 0xf2, 0x16, 0x4c, 0xf3, 0x92, 0x69, 0x7f, 0x0f, 0x8a, 0xc7, 0x38,
	0xc5, 0x72, 0x0e, 0x4e, 0xd3, 0x69, 0xbf, 0x6b, 0x9e, 0x41, 0xbc, 0x6b, 0x54, 0x65, 0x1f, 0x7e,
	0x21, 0xd8, 0x67, 0x84, 0xfe, 0x86, 0x9f, 0xd7, 0xe9, 0xde, 0x2d, 0x38, 0x8d, 0xd7, 0x3b, 0xd0,
	0x65, 0x0c, 0xbf, 0xa6, 0x63, 0x77, 0xec, 0x76, 0xab, 0xb1, 0x17, 0x71, 0x20, 0xf9, 0xa3, 0x06,
	0x6e, 0x7c, 0xd4, 0x5e, 0x00, 0x38, 0x1b, 0x37, 0x91, 0x29, 0xde, 0x83, 0x93, 0x3e, 0x57, 0xc4,
	0x2b, 0xef, 0xe9, 0xfc, 0x65, 0x7d, 0xc1, 0xb8, 0xfe, 0x9d, 0xc4, 0xb6, 0x95, 0x7b, 0x86, 0x5b,
	0xc5, 0xf6, 0xbe, 0xe5, 0x36, 0xee, 0xca, 0x4a, 0xe1, 0xc4, 0xab, 0x56, 0x5e, 0x2d, 0xba, 0x9d,
	0x95, 0xd1, 0xe3, 0xfa, 0x67, 0xe5, 0x3f, 0x30, 0x4f, 0x85, 0x6d, 0xde, 0x81, 0x8b, 0x4d, 0x00,
	0x67, 0xba, 0x0c, 0x63, 0x06, 0xee, 0xc2, 0x4c, 0x3f, 0xbc, 0x9b, 0xf8, 0xa0, 0xb6, 0xfd, 0x0f,
	0x27, 0xa8, 0x92, 0x52, 0x9d, 0xfc, 0x65, 0x99, 0x24, 0xc9, 0x2d, 0xd8, 0xb7, 0x08, 0x79, 0x02,
	0x60, 0x86, 0x1f, 0xce, 0x9c, 0x5b, 0x87, 0x23, 0x7a, 0x9d, 0x54, 0x88, 0x65, 0x86, 0xa1, 0x91,
	0x17, 0xbb, 0x15, 0x34, 0x97, 0x87, 0xf5, 0x00, 0xa4, 0x7f, 0xd6, 0x64, 0x20, 0xa2, 0xec, 0xb6,
	0x69, 0x56, 0x87, 0x97, 0xee, 0x0e, 0x33, 0x2c, 0x5c, 0x65, 0x94, 0x7f, 0x84, 0x43, 0x41, 0xa6,
	0xb3, 0x63, 0xd5, 0x85, 0x70, 0xd0, 0x59, 0x1a, 0x6c, 0xbe, 0xfe, 0x32, 0x55, 0x66, 0x5d, 0x0b,
	0xef, 0x46, 0xe1, 0xc7, 0x14, 0x17, 0x3d, 0x03, 0x30, 0xcd, 0x67, 0x2a, 0x5a, 0x12, 0x83, 0x89,
	0xbf, 0x07, 0xa4, 0xe5, 0x1e, 0xbb, 0x02, 0x25, 0x72, 0xe9, 0xfe, 0xf3, 0xb7, 0x8f, 0x07, 0x36,
	0xd0, 0x9a, 0x1a, 0xfd, 0x59, 0x72, 0x58, 0x54, 0x3b, 0x82, 0x5d, 0x3d, 0xe1, 0xbf, 0x3b, 0xee,
	0xa1, 0x53, 0x00, 0xc7, 0x38, 0x78, 0xb4, 0xd8, 0x0b, 0x99, 0x50, 0xc1, 0x52, 0x6f, 0x4d, 0x4c,
	0xc0, 0x06, 0x15, 0xb0, 0x82, 0x96, 0x92, 0x0a, 0x50, 0x4f, 0x78, 0xea, 0xe3, 0x9d, 0x81, 0x8a,
	0x56, 0x62, 0x88, 0x08, 0x12, 0x5a, 0x5a, 0xed, 0xb9, 0x8f, 0x69, 0x58, 0xa4, 0x1a, 0xe6, 0xd1,
	0xb7, 0x62, 0x0d, 0xd7, 0x92, 0x1d, 0xbd, 0x02, 0x70, 0x52, 0x18, 0x91, 0xe8, 0xa7, 0x18, 0x2e,
	0x71, 0x71, 0x2e, 0xfd, 0x7c, 0x73, 0x80, 0xe4, 0x6f, 0x46, 0x98, 0xde, 0x84, 0xc9, 0x13, 0xc4,
	0x56, 0x02, 0x79, 0xdd, 0x23, 0x36, 0x81, 0xbc, 0x98, 0xc4, 0x4c, 0x26, 0x4f, 0x90, 0xa8, 0x04,
	0x35, 0x01, 0xcc, 0x44, 0xe5, 0x09, 0x5a, 0x8b, 0x21, 0xd6, 0x25, 0xf1, 0xa4, 0xf5, 0x1b, 0xf5,
	0x32, 0x3d, 0xab, 0x54, 0x4f, 0x11, 0xa9, 0x62, 0x3d, 0xd1, 0x52, 0x9e, 0x02, 0x38, 0xcc, 0xee,
	0x74, 0x34, 0x1f, 0xc3, 0x80, 0x0f, 0x1e, 0x49, 0x49, 0x5a, 0xce, 0x38, 0xae, 0x50, 0x8e, 0xdf,
	0x23, 0x45, 0xcc, 0x31, 0x8c, 0x12, 0xee, 0xdf, 0xfc, 0x21, 0x80, 0x43, 0xc1, 0x45, 0x8c, 0xbe,
	0x8b, 0x19, 0xc9, 0xdd, 0xff, 0xd2, 0x7c, 0xc2, 0x6a, 0xc6, 0xaf, 0x40, 0xf9, 0xc9, 0x28, 0x2f,
	0xe6, 0x17, 0x24, 0x40, 0xe9, 0x8f, 0xe6, 0x79, 0x0e, 0x9c, 0x9d, 0xe7, 0xc0, 0x9b, 0xf3, 0x1c,
	0x78, 0x74, 0x91, 0x4b, 0x9d, 0x5d, 0xe4, 0x52, 0x2f, 0x2f, 0x72, 0xa9, 0xdd, 0x65, 0xd3, 0xf2,
	0x6a, 0xbe, 0xae, 0x54, 0x71, 0x23, 0x44, 0xa9, 0xd6, 0x34, 0xcb, 0xbe, 0x84, 0xfc, 0xaf, 0x03,
	0xd4, 0x3b, 0x76, 0x0c, 0xa2, 0x0f, 0xd1, 0x5f, 0x8d, 0x8b, 0xef, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0x8b, 0x6b, 0xad, 0x20, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// RawCheckpoints queries a list of checkpoints starting from a given epoch number to the current epoch number.
	RawCheckpoints(ctx context.Context, in *QueryRawCheckpointsRequest, opts ...grpc.CallOption) (*QueryRawCheckpointsResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error)
	// LatestCheckpoint queries the latest checkpoint.
	LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error)
	// UncheckpointedCheckpoints queries a list of checkpoints with the status of UNCHECKPOINTED.
	UncheckpointedCheckpoints(ctx context.Context, in *QueryUncheckpointedCheckpointsRequest, opts ...grpc.CallOption) (*QueryUncheckpointedCheckpointsResponse, error)
	// UnderconfirmedCheckpoints queries a list of checkpoints with the status of CHECKPOINTED_NOT_CONFIRMED.
	UnderconfirmedCheckpoints(ctx context.Context, in *QueryUnderconfirmedCheckpointsRequest, opts ...grpc.CallOption) (*QueryUnderconfirmedCheckpointsResponse, error)
	// ConfirmedCheckpoints queries a list of checkpoints with the status of CONFIRMED.
	ConfirmedCheckpoints(ctx context.Context, in *QueryConfirmedCheckpointsRequest, opts ...grpc.CallOption) (*QueryConfirmedCheckpointsResponse, error)
	// BlsSigs queries a list of bls sigs of the validators at a given epoch number.
	BlsSigs(ctx context.Context, in *QueryBlsSigsRequest, opts ...grpc.CallOption) (*QueryBlsSigsResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RawCheckpoints(ctx context.Context, in *QueryRawCheckpointsRequest, opts ...grpc.CallOption) (*QueryRawCheckpointsResponse, error) {
	out := new(QueryRawCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/RawCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error) {
	out := new(QueryRawCheckpointResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/RawCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error) {
	out := new(QueryLatestCheckpointResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/LatestCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UncheckpointedCheckpoints(ctx context.Context, in *QueryUncheckpointedCheckpointsRequest, opts ...grpc.CallOption) (*QueryUncheckpointedCheckpointsResponse, error) {
	out := new(QueryUncheckpointedCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/UncheckpointedCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnderconfirmedCheckpoints(ctx context.Context, in *QueryUnderconfirmedCheckpointsRequest, opts ...grpc.CallOption) (*QueryUnderconfirmedCheckpointsResponse, error) {
	out := new(QueryUnderconfirmedCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/UnderconfirmedCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConfirmedCheckpoints(ctx context.Context, in *QueryConfirmedCheckpointsRequest, opts ...grpc.CallOption) (*QueryConfirmedCheckpointsResponse, error) {
	out := new(QueryConfirmedCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/ConfirmedCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlsSigs(ctx context.Context, in *QueryBlsSigsRequest, opts ...grpc.CallOption) (*QueryBlsSigsResponse, error) {
	out := new(QueryBlsSigsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/BlsSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.checkpointing.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// RawCheckpoints queries a list of checkpoints starting from a given epoch number to the current epoch number.
	RawCheckpoints(context.Context, *QueryRawCheckpointsRequest) (*QueryRawCheckpointsResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(context.Context, *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error)
	// LatestCheckpoint queries the latest checkpoint.
	LatestCheckpoint(context.Context, *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error)
	// UncheckpointedCheckpoints queries a list of checkpoints with the status of UNCHECKPOINTED.
	UncheckpointedCheckpoints(context.Context, *QueryUncheckpointedCheckpointsRequest) (*QueryUncheckpointedCheckpointsResponse, error)
	// UnderconfirmedCheckpoints queries a list of checkpoints with the status of CHECKPOINTED_NOT_CONFIRMED.
	UnderconfirmedCheckpoints(context.Context, *QueryUnderconfirmedCheckpointsRequest) (*QueryUnderconfirmedCheckpointsResponse, error)
	// ConfirmedCheckpoints queries a list of checkpoints with the status of CONFIRMED.
	ConfirmedCheckpoints(context.Context, *QueryConfirmedCheckpointsRequest) (*QueryConfirmedCheckpointsResponse, error)
	// BlsSigs queries a list of bls sigs of the validators at a given epoch number.
	BlsSigs(context.Context, *QueryBlsSigsRequest) (*QueryBlsSigsResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RawCheckpoints(ctx context.Context, req *QueryRawCheckpointsRequest) (*QueryRawCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpoints not implemented")
}
func (*UnimplementedQueryServer) RawCheckpoint(ctx context.Context, req *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpoint not implemented")
}
func (*UnimplementedQueryServer) LatestCheckpoint(ctx context.Context, req *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestCheckpoint not implemented")
}
func (*UnimplementedQueryServer) UncheckpointedCheckpoints(ctx context.Context, req *QueryUncheckpointedCheckpointsRequest) (*QueryUncheckpointedCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncheckpointedCheckpoints not implemented")
}
func (*UnimplementedQueryServer) UnderconfirmedCheckpoints(ctx context.Context, req *QueryUnderconfirmedCheckpointsRequest) (*QueryUnderconfirmedCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnderconfirmedCheckpoints not implemented")
}
func (*UnimplementedQueryServer) ConfirmedCheckpoints(ctx context.Context, req *QueryConfirmedCheckpointsRequest) (*QueryConfirmedCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedCheckpoints not implemented")
}
func (*UnimplementedQueryServer) BlsSigs(ctx context.Context, req *QueryBlsSigsRequest) (*QueryBlsSigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlsSigs not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RawCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/RawCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpoints(ctx, req.(*QueryRawCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RawCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/RawCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpoint(ctx, req.(*QueryRawCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/LatestCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestCheckpoint(ctx, req.(*QueryLatestCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UncheckpointedCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUncheckpointedCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UncheckpointedCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/UncheckpointedCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UncheckpointedCheckpoints(ctx, req.(*QueryUncheckpointedCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnderconfirmedCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnderconfirmedCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnderconfirmedCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/UnderconfirmedCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnderconfirmedCheckpoints(ctx, req.(*QueryUnderconfirmedCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConfirmedCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfirmedCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConfirmedCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/ConfirmedCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConfirmedCheckpoints(ctx, req.(*QueryConfirmedCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlsSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlsSigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlsSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/BlsSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlsSigs(ctx, req.(*QueryBlsSigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.checkpointing.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.checkpointing.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawCheckpoints",
			Handler:    _Query_RawCheckpoints_Handler,
		},
		{
			MethodName: "RawCheckpoint",
			Handler:    _Query_RawCheckpoint_Handler,
		},
		{
			MethodName: "LatestCheckpoint",
			Handler:    _Query_LatestCheckpoint_Handler,
		},
		{
			MethodName: "UncheckpointedCheckpoints",
			Handler:    _Query_UncheckpointedCheckpoints_Handler,
		},
		{
			MethodName: "UnderconfirmedCheckpoints",
			Handler:    _Query_UnderconfirmedCheckpoints_Handler,
		},
		{
			MethodName: "ConfirmedCheckpoints",
			Handler:    _Query_ConfirmedCheckpoints_Handler,
		},
		{
			MethodName: "BlsSigs",
			Handler:    _Query_BlsSigs_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/checkpointing/query.proto",
}

func (m *QueryRawCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FromEpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromEpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawCheckpoints) > 0 {
		for iNdEx := len(m.RawCheckpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawCheckpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestCheckpoint != nil {
		{
			size, err := m.LatestCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUncheckpointedCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUncheckpointedCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUncheckpointedCheckpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUncheckpointedCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUncheckpointedCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUncheckpointedCheckpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UncheckpointedCheckpoint) > 0 {
		for iNdEx := len(m.UncheckpointedCheckpoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UncheckpointedCheckpoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnderconfirmedCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnderconfirmedCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnderconfirmedCheckpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnderconfirmedCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnderconfirmedCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnderconfirmedCheckpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnderconfirmedCheckpoint) > 0 {
		for iNdEx := len(m.UnderconfirmedCheckpoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnderconfirmedCheckpoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConfirmedCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfirmedCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfirmedCheckpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConfirmedCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfirmedCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfirmedCheckpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfirmedCheckpoint) > 0 {
		for iNdEx := len(m.ConfirmedCheckpoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfirmedCheckpoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlsSigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlsSigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlsSigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlsSigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlsSigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlsSigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlsSigs) > 0 {
		for iNdEx := len(m.BlsSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlsSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRawCheckpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromEpochNum != 0 {
		n += 1 + sovQuery(uint64(m.FromEpochNum))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawCheckpoints) > 0 {
		for _, e := range m.RawCheckpoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	return n
}

func (m *QueryRawCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestCheckpoint != nil {
		l = m.LatestCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUncheckpointedCheckpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUncheckpointedCheckpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UncheckpointedCheckpoint) > 0 {
		for _, e := range m.UncheckpointedCheckpoint {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnderconfirmedCheckpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnderconfirmedCheckpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnderconfirmedCheckpoint) > 0 {
		for _, e := range m.UnderconfirmedCheckpoint {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConfirmedCheckpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConfirmedCheckpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConfirmedCheckpoint) > 0 {
		for _, e := range m.ConfirmedCheckpoint {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlsSigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlsSigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlsSigs) > 0 {
		for _, e := range m.BlsSigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRawCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEpochNum", wireType)
			}
			m.FromEpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromEpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawCheckpoints = append(m.RawCheckpoints, &RawCheckpoint{})
			if err := m.RawCheckpoints[len(m.RawCheckpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &RawCheckpoint{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestCheckpoint == nil {
				m.LatestCheckpoint = &RawCheckpoint{}
			}
			if err := m.LatestCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUncheckpointedCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUncheckpointedCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUncheckpointedCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUncheckpointedCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUncheckpointedCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUncheckpointedCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncheckpointedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UncheckpointedCheckpoint = append(m.UncheckpointedCheckpoint, &RawCheckpoint{})
			if err := m.UncheckpointedCheckpoint[len(m.UncheckpointedCheckpoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnderconfirmedCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnderconfirmedCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnderconfirmedCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnderconfirmedCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnderconfirmedCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnderconfirmedCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderconfirmedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderconfirmedCheckpoint = append(m.UnderconfirmedCheckpoint, &RawCheckpoint{})
			if err := m.UnderconfirmedCheckpoint[len(m.UnderconfirmedCheckpoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConfirmedCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfirmedCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfirmedCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConfirmedCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfirmedCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfirmedCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedCheckpoint = append(m.ConfirmedCheckpoint, &RawCheckpoint{})
			if err := m.ConfirmedCheckpoint[len(m.ConfirmedCheckpoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlsSigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlsSigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlsSigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlsSigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlsSigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlsSigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsSigs = append(m.BlsSigs, &BlsSig{})
			if err := m.BlsSigs[len(m.BlsSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
