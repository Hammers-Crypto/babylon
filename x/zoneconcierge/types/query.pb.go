// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types2 "github.com/babylonchain/babylon/x/btccheckpoint/types"
	types1 "github.com/babylonchain/babylon/x/checkpointing/types"
	types "github.com/babylonchain/babylon/x/epoching/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	types3 "github.com/tendermint/tendermint/proto/tendermint/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryChainListRequest is request type for the Query/ChainList RPC method
type QueryChainListRequest struct {
}

func (m *QueryChainListRequest) Reset()         { *m = QueryChainListRequest{} }
func (m *QueryChainListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainListRequest) ProtoMessage()    {}
func (*QueryChainListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{2}
}
func (m *QueryChainListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListRequest.Merge(m, src)
}
func (m *QueryChainListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListRequest proto.InternalMessageInfo

// QueryChainListResponse is response type for the Query/ChainList RPC method
type QueryChainListResponse struct {
	ChainIds []string `protobuf:"bytes,1,rep,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
}

func (m *QueryChainListResponse) Reset()         { *m = QueryChainListResponse{} }
func (m *QueryChainListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainListResponse) ProtoMessage()    {}
func (*QueryChainListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{3}
}
func (m *QueryChainListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListResponse.Merge(m, src)
}
func (m *QueryChainListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListResponse proto.InternalMessageInfo

func (m *QueryChainListResponse) GetChainIds() []string {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

// QueryChainInfoRequest is request type for the Query/ChainInfo RPC method.
type QueryChainInfoRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryChainInfoRequest) Reset()         { *m = QueryChainInfoRequest{} }
func (m *QueryChainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainInfoRequest) ProtoMessage()    {}
func (*QueryChainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{4}
}
func (m *QueryChainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainInfoRequest.Merge(m, src)
}
func (m *QueryChainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainInfoRequest proto.InternalMessageInfo

func (m *QueryChainInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// QueryChainInfoResponse is response type for the Query/ChainInfo RPC method.
type QueryChainInfoResponse struct {
	// chain_info is the info of the CZ
	ChainInfo *ChainInfo `protobuf:"bytes,1,opt,name=chain_info,json=chainInfo,proto3" json:"chain_info,omitempty"`
}

func (m *QueryChainInfoResponse) Reset()         { *m = QueryChainInfoResponse{} }
func (m *QueryChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainInfoResponse) ProtoMessage()    {}
func (*QueryChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{5}
}
func (m *QueryChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainInfoResponse.Merge(m, src)
}
func (m *QueryChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainInfoResponse proto.InternalMessageInfo

func (m *QueryChainInfoResponse) GetChainInfo() *ChainInfo {
	if m != nil {
		return m.ChainInfo
	}
	return nil
}

// QueryFinalizedChainInfoRequest is request type for the Query/FinalizedChainInfo RPC method.
type QueryFinalizedChainInfoRequest struct {
	// chain_id is the ID of the CZ
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// prove indicates whether the querier wants to get proofs of this timestamp
	Prove bool `protobuf:"varint,2,opt,name=prove,proto3" json:"prove,omitempty"`
}

func (m *QueryFinalizedChainInfoRequest) Reset()         { *m = QueryFinalizedChainInfoRequest{} }
func (m *QueryFinalizedChainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedChainInfoRequest) ProtoMessage()    {}
func (*QueryFinalizedChainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{6}
}
func (m *QueryFinalizedChainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedChainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedChainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedChainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedChainInfoRequest.Merge(m, src)
}
func (m *QueryFinalizedChainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedChainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedChainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedChainInfoRequest proto.InternalMessageInfo

func (m *QueryFinalizedChainInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryFinalizedChainInfoRequest) GetProve() bool {
	if m != nil {
		return m.Prove
	}
	return false
}

// QueryFinalizedChainInfoResponse is response type for the Query/FinalizedChainInfo RPC method.
type QueryFinalizedChainInfoResponse struct {
	// finalized_chain_info is the info of the CZ
	FinalizedChainInfo *ChainInfo `protobuf:"bytes,1,opt,name=finalized_chain_info,json=finalizedChainInfo,proto3" json:"finalized_chain_info,omitempty"`
	// epoch_info is the metadata of the last BTC-finalised epoch
	EpochInfo *types.Epoch `protobuf:"bytes,2,opt,name=epoch_info,json=epochInfo,proto3" json:"epoch_info,omitempty"`
	// raw_checkpoint is the raw checkpoint of this epoch
	RawCheckpoint *types1.RawCheckpoint `protobuf:"bytes,3,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
	// btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
	BtcSubmissionKey *types2.SubmissionKey `protobuf:"bytes,4,opt,name=btc_submission_key,json=btcSubmissionKey,proto3" json:"btc_submission_key,omitempty"`
	// proof_tx_in_block is the proof that tx that carries the header is included in a certain Babylon block
	ProofTxInBlock *types3.TxProof `protobuf:"bytes,5,opt,name=proof_tx_in_block,json=proofTxInBlock,proto3" json:"proof_tx_in_block,omitempty"`
	// proof_block_in_epoch is the proof that the Babylon block is in a certain epoch
	ProofBlockInEpoch *crypto.ProofOps `protobuf:"bytes,6,opt,name=proof_block_in_epoch,json=proofBlockInEpoch,proto3" json:"proof_block_in_epoch,omitempty"`
	// proof_epoch_sealed is the proof that the epoch is sealed
	ProofEpochSealed *ProofEpochSealed `protobuf:"bytes,7,opt,name=proof_epoch_sealed,json=proofEpochSealed,proto3" json:"proof_epoch_sealed,omitempty"`
	// proof_epoch_submitted is the proof that the epoch's checkpoint is included in BTC ledger
	ProofEpochSubmitted *types2.SubmissionData `protobuf:"bytes,8,opt,name=proof_epoch_submitted,json=proofEpochSubmitted,proto3" json:"proof_epoch_submitted,omitempty"`
}

func (m *QueryFinalizedChainInfoResponse) Reset()         { *m = QueryFinalizedChainInfoResponse{} }
func (m *QueryFinalizedChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedChainInfoResponse) ProtoMessage()    {}
func (*QueryFinalizedChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2caab7ee15063236, []int{7}
}
func (m *QueryFinalizedChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedChainInfoResponse.Merge(m, src)
}
func (m *QueryFinalizedChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedChainInfoResponse proto.InternalMessageInfo

func (m *QueryFinalizedChainInfoResponse) GetFinalizedChainInfo() *ChainInfo {
	if m != nil {
		return m.FinalizedChainInfo
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetEpochInfo() *types.Epoch {
	if m != nil {
		return m.EpochInfo
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetRawCheckpoint() *types1.RawCheckpoint {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetBtcSubmissionKey() *types2.SubmissionKey {
	if m != nil {
		return m.BtcSubmissionKey
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetProofTxInBlock() *types3.TxProof {
	if m != nil {
		return m.ProofTxInBlock
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetProofBlockInEpoch() *crypto.ProofOps {
	if m != nil {
		return m.ProofBlockInEpoch
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetProofEpochSealed() *ProofEpochSealed {
	if m != nil {
		return m.ProofEpochSealed
	}
	return nil
}

func (m *QueryFinalizedChainInfoResponse) GetProofEpochSubmitted() *types2.SubmissionData {
	if m != nil {
		return m.ProofEpochSubmitted
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.zoneconcierge.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.zoneconcierge.v1.QueryParamsResponse")
	proto.RegisterType((*QueryChainListRequest)(nil), "babylon.zoneconcierge.v1.QueryChainListRequest")
	proto.RegisterType((*QueryChainListResponse)(nil), "babylon.zoneconcierge.v1.QueryChainListResponse")
	proto.RegisterType((*QueryChainInfoRequest)(nil), "babylon.zoneconcierge.v1.QueryChainInfoRequest")
	proto.RegisterType((*QueryChainInfoResponse)(nil), "babylon.zoneconcierge.v1.QueryChainInfoResponse")
	proto.RegisterType((*QueryFinalizedChainInfoRequest)(nil), "babylon.zoneconcierge.v1.QueryFinalizedChainInfoRequest")
	proto.RegisterType((*QueryFinalizedChainInfoResponse)(nil), "babylon.zoneconcierge.v1.QueryFinalizedChainInfoResponse")
}

func init() { proto.RegisterFile("babylon/zoneconcierge/query.proto", fileDescriptor_2caab7ee15063236) }

var fileDescriptor_2caab7ee15063236 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x18, 0x5d, 0x6f, 0x9b, 0xed, 0x66, 0x10, 0x55, 0x99, 0xa6, 0xe0, 0xa6, 0xe0, 0x2e, 0x46, 0x82,
	0x50, 0x81, 0x8d, 0x17, 0x55, 0xb0, 0x42, 0x42, 0x62, 0x5b, 0x90, 0x22, 0x2a, 0xda, 0xba, 0x5d,
	0x09, 0xa1, 0x4a, 0xd6, 0xd8, 0x99, 0x38, 0xd6, 0x26, 0x33, 0xae, 0x67, 0x92, 0x26, 0x45, 0xdc,
	0xf0, 0x02, 0x20, 0x71, 0xc3, 0x13, 0xc0, 0x15, 0xef, 0xd1, 0x0b, 0x2e, 0x2a, 0x71, 0xc3, 0x15,
	0x42, 0xbb, 0x3c, 0x08, 0xf2, 0x37, 0x63, 0xc7, 0xce, 0x0f, 0x1b, 0x7a, 0x13, 0xd9, 0xf3, 0x9d,
	0x73, 0xbe, 0xf3, 0x8d, 0x67, 0x4e, 0xd0, 0x9b, 0x21, 0x09, 0x67, 0x43, 0xce, 0xdc, 0xa7, 0x9c,
	0xd1, 0x88, 0xb3, 0x28, 0xa1, 0x59, 0x4c, 0xdd, 0xc7, 0x63, 0x9a, 0xcd, 0x9c, 0x34, 0xe3, 0x92,
	0x63, 0x53, 0x43, 0x9c, 0x1a, 0xc4, 0x99, 0x78, 0xed, 0x56, 0xcc, 0x63, 0x0e, 0x20, 0x37, 0x7f,
	0x52, 0xf8, 0xf6, 0xeb, 0x31, 0xe7, 0xf1, 0x90, 0xba, 0x24, 0x4d, 0x5c, 0xc2, 0x18, 0x97, 0x44,
	0x26, 0x9c, 0x89, 0xa2, 0x2a, 0x29, 0xeb, 0xd1, 0x6c, 0x94, 0x30, 0xe9, 0xca, 0x59, 0x4a, 0x85,
	0xfa, 0xd5, 0xd5, 0x37, 0x2a, 0xd5, 0x28, 0x9b, 0xa5, 0x92, 0xbb, 0x69, 0xc6, 0x79, 0x5f, 0x97,
	0x6f, 0x44, 0x5c, 0x8c, 0xb8, 0x70, 0x43, 0x22, 0xb4, 0x47, 0x77, 0xe2, 0x85, 0x54, 0x12, 0xcf,
	0x4d, 0x49, 0x9c, 0x30, 0xe8, 0xa4, 0xb1, 0x56, 0x31, 0x59, 0x28, 0xa3, 0x68, 0x40, 0xa3, 0xe3,
	0x94, 0x43, 0xcf, 0xa9, 0xae, 0xbf, 0xbb, 0xba, 0x5e, 0x7b, 0xd3, 0xd0, 0x72, 0x93, 0xe6, 0x95,
	0x84, 0xc5, 0xd5, 0x4d, 0x6a, 0xbf, 0xbd, 0x1a, 0xb2, 0x24, 0x65, 0x17, 0x38, 0x9a, 0xf2, 0x68,
	0x90, 0x43, 0x26, 0x5e, 0xf9, 0xbc, 0x88, 0xa9, 0x7f, 0x93, 0x94, 0x64, 0x64, 0x24, 0x16, 0xdd,
	0xd7, 0x31, 0xf5, 0x4f, 0x04, 0x50, 0xbb, 0x85, 0xf0, 0xfd, 0xdc, 0xe9, 0x3d, 0xe0, 0xfb, 0xf4,
	0xf1, 0x98, 0x0a, 0x69, 0x1f, 0xa1, 0xcb, 0xb5, 0x55, 0x91, 0x72, 0x26, 0x28, 0xfe, 0x14, 0xed,
	0xa8, 0x3e, 0xa6, 0xb1, 0x67, 0x74, 0x5e, 0xda, 0xdf, 0x73, 0xd6, 0x7d, 0x7d, 0x47, 0x31, 0x0f,
	0xcf, 0x3f, 0xfb, 0xeb, 0xfa, 0x96, 0xaf, 0x59, 0xf6, 0x6b, 0xe8, 0x0a, 0xc8, 0xde, 0x1a, 0x90,
	0x84, 0xdd, 0x49, 0x84, 0x2c, 0xfa, 0xdd, 0x44, 0xaf, 0x2e, 0x16, 0x74, 0xcb, 0x6b, 0xa8, 0x19,
	0xe5, 0x8b, 0x41, 0xd2, 0xcb, 0xbb, 0x9e, 0xeb, 0x34, 0xfd, 0x5d, 0x58, 0xe8, 0xf6, 0x84, 0xbd,
	0x5f, 0xd5, 0xeb, 0xb2, 0x3e, 0xd7, 0x7a, 0xf8, 0x2a, 0xda, 0x2d, 0x58, 0x60, 0xb5, 0xe9, 0x5f,
	0xd0, 0x24, 0xfb, 0x51, 0xb5, 0x95, 0xe2, 0xe8, 0x56, 0x87, 0x08, 0x69, 0x12, 0xeb, 0x73, 0x3d,
	0xe1, 0x5b, 0xeb, 0x27, 0x9c, 0x0b, 0x28, 0x87, 0xf9, 0xa3, 0x7d, 0x1f, 0x59, 0xa0, 0xfe, 0x45,
	0xc2, 0xc8, 0x30, 0x79, 0x4a, 0x7b, 0xff, 0xc3, 0x1a, 0x6e, 0xa1, 0x46, 0x9a, 0xf1, 0x09, 0x35,
	0xb7, 0xf7, 0x8c, 0xce, 0xae, 0xaf, 0x5e, 0xec, 0x5f, 0x1a, 0xe8, 0xfa, 0x5a, 0x4d, 0x6d, 0xfd,
	0x08, 0xb5, 0xfa, 0x45, 0x35, 0x78, 0xb1, 0x21, 0x70, 0x7f, 0x49, 0x1e, 0x1f, 0x20, 0x04, 0xa7,
	0x4f, 0x89, 0x6d, 0x83, 0x58, 0xbb, 0x14, 0x2b, 0x0f, 0xe6, 0xc4, 0x73, 0x3e, 0xcf, 0x9f, 0xfd,
	0x26, 0x2c, 0x01, 0xf5, 0x2b, 0x74, 0x31, 0x23, 0x4f, 0x82, 0xf9, 0x11, 0x37, 0xcf, 0x01, 0xfd,
	0x9d, 0x92, 0x5e, 0xbb, 0x0b, 0xb9, 0x86, 0x4f, 0x9e, 0xdc, 0x2a, 0xd7, 0xfc, 0x97, 0xb3, 0xea,
	0x2b, 0x3e, 0x42, 0x38, 0x94, 0x51, 0x20, 0xc6, 0xe1, 0x28, 0x11, 0x22, 0xe1, 0x2c, 0x38, 0xa6,
	0x33, 0xf3, 0xfc, 0x82, 0x66, 0xfd, 0x7e, 0x4e, 0x3c, 0xe7, 0x41, 0x89, 0xff, 0x92, 0xce, 0xfc,
	0x4b, 0xa1, 0x8c, 0x6a, 0x2b, 0xf8, 0x36, 0x7a, 0x05, 0x22, 0x24, 0x90, 0xd3, 0x20, 0x61, 0x41,
	0x38, 0xe4, 0xd1, 0xb1, 0xd9, 0x00, 0xd5, 0xab, 0xce, 0x3c, 0x6e, 0x1c, 0x15, 0x43, 0x0f, 0xa7,
	0xf7, 0x72, 0xb0, 0x7f, 0x11, 0x38, 0x0f, 0xa7, 0x5d, 0x76, 0x98, 0x13, 0xf0, 0x1d, 0xd4, 0x52,
	0x2a, 0xc0, 0xcf, 0x85, 0x60, 0x23, 0xcc, 0x1d, 0x10, 0xba, 0x56, 0x15, 0x52, 0xb9, 0xe5, 0x80,
	0xce, 0xdd, 0x54, 0xf8, 0xaa, 0x3d, 0xc8, 0x74, 0x19, 0xec, 0x22, 0xfe, 0x1a, 0x61, 0xa5, 0xa6,
	0xf6, 0x5e, 0x50, 0x32, 0xa4, 0x3d, 0xf3, 0x02, 0x68, 0xdd, 0xf8, 0x8f, 0x1b, 0x97, 0x73, 0x40,
	0xe1, 0x01, 0x30, 0xfc, 0x4b, 0xe9, 0xc2, 0x0a, 0x7e, 0x84, 0xae, 0xd4, 0x94, 0xf3, 0xad, 0x90,
	0x92, 0xf6, 0xcc, 0x5d, 0x10, 0xef, 0x6c, 0xb2, 0x8f, 0xb7, 0x89, 0x24, 0xfe, 0xe5, 0x8a, 0x74,
	0x21, 0xb2, 0xff, 0x5b, 0x03, 0x35, 0xe0, 0xa0, 0xe2, 0x1f, 0x0c, 0xb4, 0xa3, 0x02, 0x00, 0xbf,
	0xb7, 0xde, 0xf0, 0x72, 0xee, 0xb4, 0xdf, 0xdf, 0x10, 0xad, 0x8e, 0xbd, 0xdd, 0xf9, 0xfe, 0x8f,
	0x7f, 0x7e, 0xda, 0xb6, 0xf1, 0x9e, 0xbb, 0x3a, 0xf0, 0x26, 0x9e, 0xce, 0x45, 0xfc, 0xb3, 0x81,
	0x9a, 0x65, 0xb8, 0x60, 0xf7, 0x8c, 0x36, 0x8b, 0xf9, 0xd4, 0xfe, 0x60, 0x73, 0xc2, 0xe6, 0xd6,
	0xe0, 0x9e, 0x0a, 0xfc, 0x6b, 0x61, 0x0d, 0xee, 0xcd, 0x46, 0xd6, 0x2a, 0x79, 0xb2, 0x99, 0xb5,
	0x6a, 0x58, 0xd8, 0x1f, 0x81, 0x35, 0x0f, 0xbb, 0x67, 0x58, 0x83, 0x5b, 0xef, 0x7e, 0x5b, 0xa4,
	0xd5, 0x77, 0xf8, 0x77, 0x03, 0xe1, 0xe5, 0x10, 0xc2, 0x1f, 0x9f, 0xe1, 0x60, 0x6d, 0x16, 0xb6,
	0x0f, 0x5e, 0x80, 0xa9, 0x87, 0xf8, 0x0c, 0x86, 0xf8, 0x04, 0x1f, 0xac, 0x1f, 0x62, 0x55, 0x22,
	0x56, 0xc6, 0x39, 0xbc, 0xfb, 0xec, 0xc4, 0x32, 0x9e, 0x9f, 0x58, 0xc6, 0xdf, 0x27, 0x96, 0xf1,
	0xe3, 0xa9, 0xb5, 0xf5, 0xfc, 0xd4, 0xda, 0xfa, 0xf3, 0xd4, 0xda, 0xfa, 0xe6, 0x66, 0x9c, 0xc8,
	0xc1, 0x38, 0x74, 0x22, 0x3e, 0x2a, 0xe4, 0x81, 0x56, 0xf6, 0x9a, 0x2e, 0x74, 0x83, 0x78, 0x08,
	0x77, 0xe0, 0x2f, 0xf5, 0xc3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x10, 0x67, 0x97, 0xff, 0x37,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ChainList queries the list of chains that checkpoint to Babylon
	ChainList(ctx context.Context, in *QueryChainListRequest, opts ...grpc.CallOption) (*QueryChainListResponse, error)
	// ChainInfo queries the latest info of a chain in Babylon's view
	ChainInfo(ctx context.Context, in *QueryChainInfoRequest, opts ...grpc.CallOption) (*QueryChainInfoResponse, error)
	// FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs
	FinalizedChainInfo(ctx context.Context, in *QueryFinalizedChainInfoRequest, opts ...grpc.CallOption) (*QueryFinalizedChainInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainList(ctx context.Context, in *QueryChainListRequest, opts ...grpc.CallOption) (*QueryChainListResponse, error) {
	out := new(QueryChainListResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/ChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainInfo(ctx context.Context, in *QueryChainInfoRequest, opts ...grpc.CallOption) (*QueryChainInfoResponse, error) {
	out := new(QueryChainInfoResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/ChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalizedChainInfo(ctx context.Context, in *QueryFinalizedChainInfoRequest, opts ...grpc.CallOption) (*QueryFinalizedChainInfoResponse, error) {
	out := new(QueryFinalizedChainInfoResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/FinalizedChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ChainList queries the list of chains that checkpoint to Babylon
	ChainList(context.Context, *QueryChainListRequest) (*QueryChainListResponse, error)
	// ChainInfo queries the latest info of a chain in Babylon's view
	ChainInfo(context.Context, *QueryChainInfoRequest) (*QueryChainInfoResponse, error)
	// FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs
	FinalizedChainInfo(context.Context, *QueryFinalizedChainInfoRequest) (*QueryFinalizedChainInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ChainList(ctx context.Context, req *QueryChainListRequest) (*QueryChainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainList not implemented")
}
func (*UnimplementedQueryServer) ChainInfo(ctx context.Context, req *QueryChainInfoRequest) (*QueryChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainInfo not implemented")
}
func (*UnimplementedQueryServer) FinalizedChainInfo(ctx context.Context, req *QueryFinalizedChainInfoRequest) (*QueryFinalizedChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedChainInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/ChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainList(ctx, req.(*QueryChainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/ChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainInfo(ctx, req.(*QueryChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalizedChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalizedChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/FinalizedChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalizedChainInfo(ctx, req.(*QueryFinalizedChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.zoneconcierge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ChainList",
			Handler:    _Query_ChainList_Handler,
		},
		{
			MethodName: "ChainInfo",
			Handler:    _Query_ChainInfo_Handler,
		},
		{
			MethodName: "FinalizedChainInfo",
			Handler:    _Query_FinalizedChainInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/zoneconcierge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChainListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		for iNdEx := len(m.ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainIds[iNdEx])
			copy(dAtA[i:], m.ChainIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainInfo != nil {
		{
			size, err := m.ChainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedChainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedChainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedChainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prove {
		i--
		if m.Prove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofEpochSubmitted != nil {
		{
			size, err := m.ProofEpochSubmitted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ProofEpochSealed != nil {
		{
			size, err := m.ProofEpochSealed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ProofBlockInEpoch != nil {
		{
			size, err := m.ProofBlockInEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ProofTxInBlock != nil {
		{
			size, err := m.ProofTxInBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BtcSubmissionKey != nil {
		{
			size, err := m.BtcSubmissionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochInfo != nil {
		{
			size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FinalizedChainInfo != nil {
		{
			size, err := m.FinalizedChainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChainListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		for _, s := range m.ChainIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryChainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainInfo != nil {
		l = m.ChainInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalizedChainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Prove {
		n += 2
	}
	return n
}

func (m *QueryFinalizedChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizedChainInfo != nil {
		l = m.FinalizedChainInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochInfo != nil {
		l = m.EpochInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BtcSubmissionKey != nil {
		l = m.BtcSubmissionKey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProofTxInBlock != nil {
		l = m.ProofTxInBlock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProofBlockInEpoch != nil {
		l = m.ProofBlockInEpoch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProofEpochSealed != nil {
		l = m.ProofEpochSealed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProofEpochSubmitted != nil {
		l = m.ProofEpochSubmitted.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIds = append(m.ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainInfo == nil {
				m.ChainInfo = &ChainInfo{}
			}
			if err := m.ChainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedChainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedChainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedChainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedChainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedChainInfo == nil {
				m.FinalizedChainInfo = &ChainInfo{}
			}
			if err := m.FinalizedChainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochInfo == nil {
				m.EpochInfo = &types.Epoch{}
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &types1.RawCheckpoint{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSubmissionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcSubmissionKey == nil {
				m.BtcSubmissionKey = &types2.SubmissionKey{}
			}
			if err := m.BtcSubmissionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofTxInBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofTxInBlock == nil {
				m.ProofTxInBlock = &types3.TxProof{}
			}
			if err := m.ProofTxInBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofBlockInEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofBlockInEpoch == nil {
				m.ProofBlockInEpoch = &crypto.ProofOps{}
			}
			if err := m.ProofBlockInEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochSealed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochSealed == nil {
				m.ProofEpochSealed = &ProofEpochSealed{}
			}
			if err := m.ProofEpochSealed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochSubmitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochSubmitted == nil {
				m.ProofEpochSubmitted = &types2.SubmissionData{}
			}
			if err := m.ProofEpochSubmitted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
