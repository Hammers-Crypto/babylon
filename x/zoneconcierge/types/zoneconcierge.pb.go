// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/zoneconcierge.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IndexedHeader is the metadata of a CZ header
type IndexedHeader struct {
	// hash is the hash of this header
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// height is the height of this header on CZ ledger
	// (hash, height) jointly provides the position of the header on CZ ledger
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// babylon_block_height is the height of the Babylon block that includes this header
	BabylonBlockHeight uint64 `protobuf:"varint,3,opt,name=babylon_block_height,json=babylonBlockHeight,proto3" json:"babylon_block_height,omitempty"`
	// babylon_tx_hash is the hash of the tx that includes this header
	// (babylon_block_height, babylon_tx_hash) jointly provides the position of the header on Babylon ledger
	BabylonTxHash []byte `protobuf:"bytes,4,opt,name=babylon_tx_hash,json=babylonTxHash,proto3" json:"babylon_tx_hash,omitempty"`
}

func (m *IndexedHeader) Reset()         { *m = IndexedHeader{} }
func (m *IndexedHeader) String() string { return proto.CompactTextString(m) }
func (*IndexedHeader) ProtoMessage()    {}
func (*IndexedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c76d28ce8dde4532, []int{0}
}
func (m *IndexedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedHeader.Merge(m, src)
}
func (m *IndexedHeader) XXX_Size() int {
	return m.Size()
}
func (m *IndexedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedHeader proto.InternalMessageInfo

func (m *IndexedHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *IndexedHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IndexedHeader) GetBabylonBlockHeight() uint64 {
	if m != nil {
		return m.BabylonBlockHeight
	}
	return 0
}

func (m *IndexedHeader) GetBabylonTxHash() []byte {
	if m != nil {
		return m.BabylonTxHash
	}
	return nil
}

// ChainInfo is the information of a CZ
type ChainInfo struct {
	// latest_header is the latest header in the canonical chain of CZ
	LatestHeader *types.Header `protobuf:"bytes,1,opt,name=latest_header,json=latestHeader,proto3" json:"latest_header,omitempty"`
	// latest_fork is the latest fork, formed as a series of IndexedHeader (from low to high)
	LatestFork []*IndexedHeader `protobuf:"bytes,2,rep,name=latest_fork,json=latestFork,proto3" json:"latest_fork,omitempty"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c76d28ce8dde4532, []int{1}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetLatestHeader() *types.Header {
	if m != nil {
		return m.LatestHeader
	}
	return nil
}

func (m *ChainInfo) GetLatestFork() []*IndexedHeader {
	if m != nil {
		return m.LatestFork
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexedHeader)(nil), "babylonchain.babylon.zoneconcierge.IndexedHeader")
	proto.RegisterType((*ChainInfo)(nil), "babylonchain.babylon.zoneconcierge.ChainInfo")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/zoneconcierge.proto", fileDescriptor_c76d28ce8dde4532)
}

var fileDescriptor_c76d28ce8dde4532 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x41, 0x4b, 0x33, 0x31,
	0x10, 0x6d, 0xda, 0x52, 0xf8, 0xd2, 0x96, 0x0f, 0x82, 0xc8, 0x22, 0x12, 0x4a, 0x0f, 0x52, 0x2f,
	0x59, 0xad, 0x78, 0xf4, 0x52, 0x41, 0xda, 0x93, 0xb0, 0x78, 0xf2, 0xb2, 0x64, 0x77, 0xa7, 0xcd,
	0xd2, 0x36, 0x29, 0xd9, 0x08, 0x5b, 0x7f, 0x85, 0x17, 0xaf, 0xfe, 0x1e, 0x8f, 0x3d, 0x7a, 0x94,
	0xf6, 0x8f, 0x48, 0x93, 0x14, 0x5d, 0x2f, 0x5e, 0x96, 0x7d, 0x99, 0x37, 0xf3, 0xde, 0x9b, 0xc1,
	0xe7, 0x09, 0x4f, 0xd6, 0x0b, 0x25, 0xc3, 0x67, 0x25, 0x21, 0x55, 0x32, 0xcd, 0x41, 0xcf, 0xa0,
	0x8a, 0xd8, 0x4a, 0x2b, 0xa3, 0x48, 0xdf, 0x53, 0x53, 0xc1, 0x73, 0xc9, 0x3c, 0x60, 0x15, 0xe6,
	0xc9, 0xa9, 0x01, 0x99, 0x81, 0x5e, 0xe6, 0xd2, 0x84, 0x66, 0xbd, 0x82, 0xc2, 0x7d, 0xdd, 0x84,
	0xfe, 0x2b, 0xc2, 0xdd, 0x89, 0xcc, 0xa0, 0x84, 0x6c, 0x0c, 0x3c, 0x03, 0x4d, 0x08, 0x6e, 0x0a,
	0x5e, 0x88, 0x00, 0xf5, 0xd0, 0xa0, 0x13, 0xd9, 0x7f, 0x72, 0x8c, 0x5b, 0x02, 0xf2, 0x99, 0x30,
	0x41, 0xbd, 0x87, 0x06, 0xcd, 0xc8, 0x23, 0x72, 0x81, 0x8f, 0xbc, 0x68, 0x9c, 0x2c, 0x54, 0x3a,
	0x8f, 0x3d, 0xab, 0x61, 0x59, 0xc4, 0xd7, 0x46, 0xfb, 0xd2, 0xd8, 0x75, 0x9c, 0xe1, 0xff, 0x87,
	0x0e, 0x53, 0xc6, 0x56, 0xa8, 0x69, 0x85, 0xba, 0xfe, 0xf9, 0xa1, 0x1c, 0xf3, 0x42, 0xf4, 0xdf,
	0x10, 0xfe, 0x77, 0xbb, 0x4f, 0x35, 0x91, 0x53, 0x45, 0x6e, 0x70, 0x77, 0xc1, 0x0d, 0x14, 0x26,
	0x16, 0xd6, 0xa4, 0x35, 0xd7, 0x1e, 0x06, 0xec, 0x3b, 0x1b, 0x73, 0xa9, 0x5c, 0x88, 0xa8, 0xe3,
	0xe8, 0x3e, 0x52, 0x84, 0xdb, 0xbe, 0x7d, 0xaa, 0xf4, 0x3c, 0xa8, 0xf7, 0x1a, 0x83, 0xf6, 0xf0,
	0x92, 0xfd, 0xbd, 0x3c, 0x56, 0x59, 0x4d, 0x84, 0xdd, 0x94, 0x3b, 0xa5, 0xe7, 0xa3, 0xfb, 0xf7,
	0x2d, 0x45, 0x9b, 0x2d, 0x45, 0x9f, 0x5b, 0x8a, 0x5e, 0x76, 0xb4, 0xb6, 0xd9, 0xd1, 0xda, 0xc7,
	0x8e, 0xd6, 0x1e, 0xaf, 0x67, 0xb9, 0x11, 0x4f, 0x09, 0x4b, 0xd5, 0x32, 0xfc, 0x29, 0x71, 0x00,
	0x61, 0xf9, 0xeb, 0xb2, 0xd6, 0x79, 0xd2, 0xb2, 0x07, 0xb9, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x91, 0x26, 0x17, 0xff, 0x01, 0x00, 0x00,
}

func (m *IndexedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BabylonTxHash) > 0 {
		i -= len(m.BabylonTxHash)
		copy(dAtA[i:], m.BabylonTxHash)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.BabylonTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BabylonBlockHeight != 0 {
		i = encodeVarintZoneconcierge(dAtA, i, uint64(m.BabylonBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintZoneconcierge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestFork) > 0 {
		for iNdEx := len(m.LatestFork) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatestFork[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LatestHeader != nil {
		{
			size, err := m.LatestHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZoneconcierge(dAtA []byte, offset int, v uint64) int {
	offset -= sovZoneconcierge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovZoneconcierge(uint64(m.Height))
	}
	if m.BabylonBlockHeight != 0 {
		n += 1 + sovZoneconcierge(uint64(m.BabylonBlockHeight))
	}
	l = len(m.BabylonTxHash)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestHeader != nil {
		l = m.LatestHeader.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if len(m.LatestFork) > 0 {
		for _, e := range m.LatestFork {
			l = e.Size()
			n += 1 + l + sovZoneconcierge(uint64(l))
		}
	}
	return n
}

func sovZoneconcierge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZoneconcierge(x uint64) (n int) {
	return sovZoneconcierge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonBlockHeight", wireType)
			}
			m.BabylonBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonTxHash = append(m.BabylonTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonTxHash == nil {
				m.BabylonTxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestHeader == nil {
				m.LatestHeader = &types.Header{}
			}
			if err := m.LatestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestFork = append(m.LatestFork, &IndexedHeader{})
			if err := m.LatestFork[len(m.LatestFork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZoneconcierge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZoneconcierge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZoneconcierge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZoneconcierge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZoneconcierge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZoneconcierge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZoneconcierge = fmt.Errorf("proto: unexpected end of group")
)
