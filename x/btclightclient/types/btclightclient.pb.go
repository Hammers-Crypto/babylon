// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btclightclient/btclightclient.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BTCHeader defines the structure of the incoming message bytes
type BTCHeaderBytes struct {
	HeaderBytes []byte `protobuf:"bytes,1,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
}

func (m *BTCHeaderBytes) Reset()         { *m = BTCHeaderBytes{} }
func (m *BTCHeaderBytes) String() string { return proto.CompactTextString(m) }
func (*BTCHeaderBytes) ProtoMessage()    {}
func (*BTCHeaderBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3313d955a6cadef2, []int{0}
}
func (m *BTCHeaderBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCHeaderBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCHeaderBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCHeaderBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCHeaderBytes.Merge(m, src)
}
func (m *BTCHeaderBytes) XXX_Size() int {
	return m.Size()
}
func (m *BTCHeaderBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCHeaderBytes.DiscardUnknown(m)
}

var xxx_messageInfo_BTCHeaderBytes proto.InternalMessageInfo

func (m *BTCHeaderBytes) GetHeaderBytes() []byte {
	if m != nil {
		return m.HeaderBytes
	}
	return nil
}

func init() {
	proto.RegisterType((*BTCHeaderBytes)(nil), "babylon.btclightclient.v1.BTCHeaderBytes")
}

func init() {
	proto.RegisterFile("babylon/btclightclient/btclightclient.proto", fileDescriptor_3313d955a6cadef2)
}

var fileDescriptor_3313d955a6cadef2 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x4a, 0x4c, 0xaa,
	0xcc, 0xc9, 0xcf, 0xd3, 0x4f, 0x2a, 0x49, 0xce, 0xc9, 0x4c, 0xcf, 0x00, 0x91, 0xa9, 0x79, 0x25,
	0x68, 0x5c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x49, 0xa8, 0x62, 0x3d, 0x34, 0xd9, 0x32,
	0x43, 0x29, 0xf9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0xc2, 0xa4, 0xd2, 0x34, 0xfd,
	0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x88, 0x5e, 0x25, 0x63, 0x2e, 0x3e, 0xa7,
	0x10, 0x67, 0x8f, 0xd4, 0xc4, 0x94, 0xd4, 0x22, 0xa7, 0xca, 0x92, 0xd4, 0x62, 0x21, 0x45, 0x2e,
	0x9e, 0x0c, 0x30, 0x37, 0x3e, 0x09, 0xc4, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0xe2, 0xce,
	0x40, 0x28, 0x71, 0x0a, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xb3,
	0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xa8, 0xab, 0x92, 0x33, 0x12,
	0x33, 0xf3, 0x60, 0x1c, 0xfd, 0x0a, 0x74, 0x1f, 0x95, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81,
	0x5d, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x37, 0x0a, 0x34, 0x0a, 0xf8, 0x00, 0x00, 0x00,
}

func (m *BTCHeaderBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCHeaderBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCHeaderBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeaderBytes) > 0 {
		i -= len(m.HeaderBytes)
		copy(dAtA[i:], m.HeaderBytes)
		i = encodeVarintBtclightclient(dAtA, i, uint64(len(m.HeaderBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBtclightclient(dAtA []byte, offset int, v uint64) int {
	offset -= sovBtclightclient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BTCHeaderBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderBytes)
	if l > 0 {
		n += 1 + l + sovBtclightclient(uint64(l))
	}
	return n
}

func sovBtclightclient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBtclightclient(x uint64) (n int) {
	return sovBtclightclient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BTCHeaderBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtclightclient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCHeaderBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCHeaderBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtclightclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtclightclient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtclightclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBytes = append(m.HeaderBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderBytes == nil {
				m.HeaderBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtclightclient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtclightclient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBtclightclient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBtclightclient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtclightclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtclightclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBtclightclient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBtclightclient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBtclightclient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBtclightclient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBtclightclient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBtclightclient = fmt.Errorf("proto: unexpected end of group")
)
