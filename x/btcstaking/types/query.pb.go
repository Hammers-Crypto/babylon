// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_babylonchain_babylon_types "github.com/babylonchain/babylon/types"
	_ "github.com/cosmos/cosmos-proto"
	secp256k1 "github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsByVersionRequest struct {
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryParamsByVersionRequest) Reset()         { *m = QueryParamsByVersionRequest{} }
func (m *QueryParamsByVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsByVersionRequest) ProtoMessage()    {}
func (*QueryParamsByVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{2}
}
func (m *QueryParamsByVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsByVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsByVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsByVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsByVersionRequest.Merge(m, src)
}
func (m *QueryParamsByVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsByVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsByVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsByVersionRequest proto.InternalMessageInfo

func (m *QueryParamsByVersionRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsByVersionResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsByVersionResponse) Reset()         { *m = QueryParamsByVersionResponse{} }
func (m *QueryParamsByVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsByVersionResponse) ProtoMessage()    {}
func (*QueryParamsByVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{3}
}
func (m *QueryParamsByVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsByVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsByVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsByVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsByVersionResponse.Merge(m, src)
}
func (m *QueryParamsByVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsByVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsByVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsByVersionResponse proto.InternalMessageInfo

func (m *QueryParamsByVersionResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryFinalityProvidersRequest is the request type for the
// Query/FinalityProviders RPC method.
type QueryFinalityProvidersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProvidersRequest) Reset()         { *m = QueryFinalityProvidersRequest{} }
func (m *QueryFinalityProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProvidersRequest) ProtoMessage()    {}
func (*QueryFinalityProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{4}
}
func (m *QueryFinalityProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProvidersRequest.Merge(m, src)
}
func (m *QueryFinalityProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProvidersRequest proto.InternalMessageInfo

func (m *QueryFinalityProvidersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProvidersResponse is the response type for the
// Query/FinalityProviders RPC method.
type QueryFinalityProvidersResponse struct {
	// finality_providers contains all the finality providers
	FinalityProviders []*FinalityProviderResponse `protobuf:"bytes,1,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProvidersResponse) Reset()         { *m = QueryFinalityProvidersResponse{} }
func (m *QueryFinalityProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProvidersResponse) ProtoMessage()    {}
func (*QueryFinalityProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{5}
}
func (m *QueryFinalityProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProvidersResponse.Merge(m, src)
}
func (m *QueryFinalityProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProvidersResponse proto.InternalMessageInfo

func (m *QueryFinalityProvidersResponse) GetFinalityProviders() []*FinalityProviderResponse {
	if m != nil {
		return m.FinalityProviders
	}
	return nil
}

func (m *QueryFinalityProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProviderRequest requests information about a finality provider
type QueryFinalityProviderRequest struct {
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
}

func (m *QueryFinalityProviderRequest) Reset()         { *m = QueryFinalityProviderRequest{} }
func (m *QueryFinalityProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderRequest) ProtoMessage()    {}
func (*QueryFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{6}
}
func (m *QueryFinalityProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderRequest.Merge(m, src)
}
func (m *QueryFinalityProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

// QueryFinalityProviderResponse contains information about a finality provider
type QueryFinalityProviderResponse struct {
	// finality_provider contains the FinalityProvider
	FinalityProvider *FinalityProviderResponse `protobuf:"bytes,1,opt,name=finality_provider,json=finalityProvider,proto3" json:"finality_provider,omitempty"`
}

func (m *QueryFinalityProviderResponse) Reset()         { *m = QueryFinalityProviderResponse{} }
func (m *QueryFinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderResponse) ProtoMessage()    {}
func (*QueryFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{7}
}
func (m *QueryFinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderResponse.Merge(m, src)
}
func (m *QueryFinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderResponse) GetFinalityProvider() *FinalityProviderResponse {
	if m != nil {
		return m.FinalityProvider
	}
	return nil
}

// QueryBTCDelegationsRequest is the request type for the
// Query/BTCDelegations RPC method.
type QueryBTCDelegationsRequest struct {
	// status is the queried status for BTC delegations
	Status BTCDelegationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=babylon.btcstaking.v1.BTCDelegationStatus" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCDelegationsRequest) Reset()         { *m = QueryBTCDelegationsRequest{} }
func (m *QueryBTCDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationsRequest) ProtoMessage()    {}
func (*QueryBTCDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{8}
}
func (m *QueryBTCDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationsRequest.Merge(m, src)
}
func (m *QueryBTCDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationsRequest proto.InternalMessageInfo

func (m *QueryBTCDelegationsRequest) GetStatus() BTCDelegationStatus {
	if m != nil {
		return m.Status
	}
	return BTCDelegationStatus_PENDING
}

func (m *QueryBTCDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCDelegationsResponse is the response type for the
// Query/BTCDelegations RPC method.
type QueryBTCDelegationsResponse struct {
	// btc_delegations contains all the queried BTC delegations under the given status
	BtcDelegations []*BTCDelegationResponse `protobuf:"bytes,1,rep,name=btc_delegations,json=btcDelegations,proto3" json:"btc_delegations,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCDelegationsResponse) Reset()         { *m = QueryBTCDelegationsResponse{} }
func (m *QueryBTCDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationsResponse) ProtoMessage()    {}
func (*QueryBTCDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{9}
}
func (m *QueryBTCDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationsResponse.Merge(m, src)
}
func (m *QueryBTCDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationsResponse proto.InternalMessageInfo

func (m *QueryBTCDelegationsResponse) GetBtcDelegations() []*BTCDelegationResponse {
	if m != nil {
		return m.BtcDelegations
	}
	return nil
}

func (m *QueryBTCDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProviderPowerAtHeightRequest is the request type for the
// Query/FinalityProviderPowerAtHeight RPC method.
type QueryFinalityProviderPowerAtHeightRequest struct {
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider that
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
	// height is used for querying the given finality provider's voting power at this height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryFinalityProviderPowerAtHeightRequest) Reset() {
	*m = QueryFinalityProviderPowerAtHeightRequest{}
}
func (m *QueryFinalityProviderPowerAtHeightRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryFinalityProviderPowerAtHeightRequest) ProtoMessage() {}
func (*QueryFinalityProviderPowerAtHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{10}
}
func (m *QueryFinalityProviderPowerAtHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderPowerAtHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderPowerAtHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderPowerAtHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderPowerAtHeightRequest.Merge(m, src)
}
func (m *QueryFinalityProviderPowerAtHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderPowerAtHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderPowerAtHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderPowerAtHeightRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderPowerAtHeightRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

func (m *QueryFinalityProviderPowerAtHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryFinalityProviderPowerAtHeightResponse is the response type for the
// Query/FinalityProviderPowerAtHeight RPC method.
type QueryFinalityProviderPowerAtHeightResponse struct {
	// voting_power is the voting power of the finality provider
	VotingPower uint64 `protobuf:"varint,1,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *QueryFinalityProviderPowerAtHeightResponse) Reset() {
	*m = QueryFinalityProviderPowerAtHeightResponse{}
}
func (m *QueryFinalityProviderPowerAtHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryFinalityProviderPowerAtHeightResponse) ProtoMessage() {}
func (*QueryFinalityProviderPowerAtHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{11}
}
func (m *QueryFinalityProviderPowerAtHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderPowerAtHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderPowerAtHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderPowerAtHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderPowerAtHeightResponse.Merge(m, src)
}
func (m *QueryFinalityProviderPowerAtHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderPowerAtHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderPowerAtHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderPowerAtHeightResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderPowerAtHeightResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

// QueryFinalityProviderCurrentPowerRequest is the request type for the
// Query/FinalityProviderCurrentPower RPC method.
type QueryFinalityProviderCurrentPowerRequest struct {
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider that
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
}

func (m *QueryFinalityProviderCurrentPowerRequest) Reset() {
	*m = QueryFinalityProviderCurrentPowerRequest{}
}
func (m *QueryFinalityProviderCurrentPowerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderCurrentPowerRequest) ProtoMessage()    {}
func (*QueryFinalityProviderCurrentPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{12}
}
func (m *QueryFinalityProviderCurrentPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderCurrentPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderCurrentPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderCurrentPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderCurrentPowerRequest.Merge(m, src)
}
func (m *QueryFinalityProviderCurrentPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderCurrentPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderCurrentPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderCurrentPowerRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderCurrentPowerRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

// QueryFinalityProviderCurrentPowerResponse is the response type for the
// Query/FinalityProviderCurrentPower RPC method.
type QueryFinalityProviderCurrentPowerResponse struct {
	// height is the current height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// voting_power is the voting power of the finality provider
	VotingPower uint64 `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *QueryFinalityProviderCurrentPowerResponse) Reset() {
	*m = QueryFinalityProviderCurrentPowerResponse{}
}
func (m *QueryFinalityProviderCurrentPowerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryFinalityProviderCurrentPowerResponse) ProtoMessage() {}
func (*QueryFinalityProviderCurrentPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{13}
}
func (m *QueryFinalityProviderCurrentPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderCurrentPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderCurrentPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderCurrentPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderCurrentPowerResponse.Merge(m, src)
}
func (m *QueryFinalityProviderCurrentPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderCurrentPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderCurrentPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderCurrentPowerResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderCurrentPowerResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryFinalityProviderCurrentPowerResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

// QueryActiveFinalityProvidersAtHeightRequest is the request type for the
// Query/ActiveFinalityProvidersAtHeight RPC method.
type QueryActiveFinalityProvidersAtHeightRequest struct {
	// height defines at which Babylon height to query the finality providers info.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) Reset() {
	*m = QueryActiveFinalityProvidersAtHeightRequest{}
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryActiveFinalityProvidersAtHeightRequest) ProtoMessage() {}
func (*QueryActiveFinalityProvidersAtHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{14}
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveFinalityProvidersAtHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveFinalityProvidersAtHeightRequest.Merge(m, src)
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveFinalityProvidersAtHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveFinalityProvidersAtHeightRequest proto.InternalMessageInfo

func (m *QueryActiveFinalityProvidersAtHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryActiveFinalityProvidersAtHeightResponse is the response type for the
// Query/ActiveFinalityProvidersAtHeight RPC method.
type QueryActiveFinalityProvidersAtHeightResponse struct {
	// finality_providers contains all the queried finality providersn.
	FinalityProviders []*FinalityProviderWithMeta `protobuf:"bytes,1,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) Reset() {
	*m = QueryActiveFinalityProvidersAtHeightResponse{}
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryActiveFinalityProvidersAtHeightResponse) ProtoMessage() {}
func (*QueryActiveFinalityProvidersAtHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{15}
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveFinalityProvidersAtHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveFinalityProvidersAtHeightResponse.Merge(m, src)
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveFinalityProvidersAtHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveFinalityProvidersAtHeightResponse proto.InternalMessageInfo

func (m *QueryActiveFinalityProvidersAtHeightResponse) GetFinalityProviders() []*FinalityProviderWithMeta {
	if m != nil {
		return m.FinalityProviders
	}
	return nil
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryActivatedHeightRequest is the request type for the Query/ActivatedHeight RPC method.
type QueryActivatedHeightRequest struct {
}

func (m *QueryActivatedHeightRequest) Reset()         { *m = QueryActivatedHeightRequest{} }
func (m *QueryActivatedHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActivatedHeightRequest) ProtoMessage()    {}
func (*QueryActivatedHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{16}
}
func (m *QueryActivatedHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivatedHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivatedHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivatedHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivatedHeightRequest.Merge(m, src)
}
func (m *QueryActivatedHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivatedHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivatedHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivatedHeightRequest proto.InternalMessageInfo

// QueryActivatedHeightResponse is the response type for the Query/ActivatedHeight RPC method.
type QueryActivatedHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryActivatedHeightResponse) Reset()         { *m = QueryActivatedHeightResponse{} }
func (m *QueryActivatedHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActivatedHeightResponse) ProtoMessage()    {}
func (*QueryActivatedHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{17}
}
func (m *QueryActivatedHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivatedHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivatedHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivatedHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivatedHeightResponse.Merge(m, src)
}
func (m *QueryActivatedHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivatedHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivatedHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivatedHeightResponse proto.InternalMessageInfo

func (m *QueryActivatedHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryFinalityProviderDelegationsRequest is the request type for the
// Query/FinalityProviderDelegations RPC method.
type QueryFinalityProviderDelegationsRequest struct {
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality providerthat
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProviderDelegationsRequest) Reset() {
	*m = QueryFinalityProviderDelegationsRequest{}
}
func (m *QueryFinalityProviderDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderDelegationsRequest) ProtoMessage()    {}
func (*QueryFinalityProviderDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{18}
}
func (m *QueryFinalityProviderDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderDelegationsRequest.Merge(m, src)
}
func (m *QueryFinalityProviderDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderDelegationsRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderDelegationsRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

func (m *QueryFinalityProviderDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProviderDelegationsResponse is the response type for the
// Query/FinalityProviderDelegations RPC method.
type QueryFinalityProviderDelegationsResponse struct {
	// btc_delegator_delegations contains all the queried BTC delegations.
	BtcDelegatorDelegations []*BTCDelegatorDelegationsResponse `protobuf:"bytes,1,rep,name=btc_delegator_delegations,json=btcDelegatorDelegations,proto3" json:"btc_delegator_delegations,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProviderDelegationsResponse) Reset() {
	*m = QueryFinalityProviderDelegationsResponse{}
}
func (m *QueryFinalityProviderDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderDelegationsResponse) ProtoMessage()    {}
func (*QueryFinalityProviderDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{19}
}
func (m *QueryFinalityProviderDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderDelegationsResponse.Merge(m, src)
}
func (m *QueryFinalityProviderDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderDelegationsResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderDelegationsResponse) GetBtcDelegatorDelegations() []*BTCDelegatorDelegationsResponse {
	if m != nil {
		return m.BtcDelegatorDelegations
	}
	return nil
}

func (m *QueryFinalityProviderDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCDelegationRequest is the request type to retrieve a BTC delegation by
// staking tx hash
type QueryBTCDelegationRequest struct {
	// Hash of staking transaction in btc format
	StakingTxHashHex string `protobuf:"bytes,1,opt,name=staking_tx_hash_hex,json=stakingTxHashHex,proto3" json:"staking_tx_hash_hex,omitempty"`
}

func (m *QueryBTCDelegationRequest) Reset()         { *m = QueryBTCDelegationRequest{} }
func (m *QueryBTCDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationRequest) ProtoMessage()    {}
func (*QueryBTCDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{20}
}
func (m *QueryBTCDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationRequest.Merge(m, src)
}
func (m *QueryBTCDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationRequest proto.InternalMessageInfo

func (m *QueryBTCDelegationRequest) GetStakingTxHashHex() string {
	if m != nil {
		return m.StakingTxHashHex
	}
	return ""
}

// QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest
// and containing BTC delegation information
type QueryBTCDelegationResponse struct {
	// BTCDelegation represents the client needed information of an BTCDelegation.
	BtcDelegation *BTCDelegationResponse `protobuf:"bytes,1,opt,name=btc_delegation,json=btcDelegation,proto3" json:"btc_delegation,omitempty"`
}

func (m *QueryBTCDelegationResponse) Reset()         { *m = QueryBTCDelegationResponse{} }
func (m *QueryBTCDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationResponse) ProtoMessage()    {}
func (*QueryBTCDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{21}
}
func (m *QueryBTCDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationResponse.Merge(m, src)
}
func (m *QueryBTCDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationResponse proto.InternalMessageInfo

func (m *QueryBTCDelegationResponse) GetBtcDelegation() *BTCDelegationResponse {
	if m != nil {
		return m.BtcDelegation
	}
	return nil
}

// BTCDelegationResponse is the client needed information from a BTCDelegation with the current status based on parameters.
type BTCDelegationResponse struct {
	// btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
	// this BTC delegation delegates to
	FpBtcPkList []github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,2,rep,name=fp_btc_pk_list,json=fpBtcPkList,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"fp_btc_pk_list,omitempty"`
	// start_height is the start BTC height of the BTC delegation
	// it is the start BTC height of the timelock
	StartHeight uint64 `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// end_height is the end height of the BTC delegation
	// it is the end BTC height of the timelock - w
	EndHeight uint64 `protobuf:"varint,4,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// total_sat is the total amount of BTC stakes in this delegation
	// quantified in satoshi
	TotalSat uint64 `protobuf:"varint,5,opt,name=total_sat,json=totalSat,proto3" json:"total_sat,omitempty"`
	// staking_tx_hex is the hex string of staking tx
	StakingTxHex string `protobuf:"bytes,6,opt,name=staking_tx_hex,json=stakingTxHex,proto3" json:"staking_tx_hex,omitempty"`
	// slashing_tx_hex is the hex string of slashing tx
	SlashingTxHex string `protobuf:"bytes,7,opt,name=slashing_tx_hex,json=slashingTxHex,proto3" json:"slashing_tx_hex,omitempty"`
	// delegator_slash_sig_hex is the signature on the slashing tx
	// by the delegator (i.e., SK corresponding to btc_pk) as string hex.
	// It will be a part of the witness for the staking tx output.
	DelegatorSlashSigHex string `protobuf:"bytes,8,opt,name=delegator_slash_sig_hex,json=delegatorSlashSigHex,proto3" json:"delegator_slash_sig_hex,omitempty"`
	// covenant_sigs is a list of adaptor signatures on the slashing tx
	// by each covenant member
	// It will be a part of the witness for the staking tx output.
	CovenantSigs []*CovenantAdaptorSignatures `protobuf:"bytes,9,rep,name=covenant_sigs,json=covenantSigs,proto3" json:"covenant_sigs,omitempty"`
	// staking_output_idx is the index of the staking output in the staking tx
	StakingOutputIdx uint32 `protobuf:"varint,10,opt,name=staking_output_idx,json=stakingOutputIdx,proto3" json:"staking_output_idx,omitempty"`
	// whether this delegation is active
	Active bool `protobuf:"varint,11,opt,name=active,proto3" json:"active,omitempty"`
	// descriptive status of current delegation.
	StatusDesc string `protobuf:"bytes,12,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	// unbonding_time used in unbonding output timelock path and in slashing transactions
	// change outputs
	UnbondingTime uint32 `protobuf:"varint,13,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// undelegation_response is the undelegation info of this delegation.
	UndelegationResponse *BTCUndelegationResponse `protobuf:"bytes,14,opt,name=undelegation_response,json=undelegationResponse,proto3" json:"undelegation_response,omitempty"`
	// params version used to validate delegation
	ParamsVersion uint32 `protobuf:"varint,15,opt,name=params_version,json=paramsVersion,proto3" json:"params_version,omitempty"`
}

func (m *BTCDelegationResponse) Reset()         { *m = BTCDelegationResponse{} }
func (m *BTCDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*BTCDelegationResponse) ProtoMessage()    {}
func (*BTCDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{22}
}
func (m *BTCDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegationResponse.Merge(m, src)
}
func (m *BTCDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegationResponse proto.InternalMessageInfo

func (m *BTCDelegationResponse) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *BTCDelegationResponse) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *BTCDelegationResponse) GetTotalSat() uint64 {
	if m != nil {
		return m.TotalSat
	}
	return 0
}

func (m *BTCDelegationResponse) GetStakingTxHex() string {
	if m != nil {
		return m.StakingTxHex
	}
	return ""
}

func (m *BTCDelegationResponse) GetSlashingTxHex() string {
	if m != nil {
		return m.SlashingTxHex
	}
	return ""
}

func (m *BTCDelegationResponse) GetDelegatorSlashSigHex() string {
	if m != nil {
		return m.DelegatorSlashSigHex
	}
	return ""
}

func (m *BTCDelegationResponse) GetCovenantSigs() []*CovenantAdaptorSignatures {
	if m != nil {
		return m.CovenantSigs
	}
	return nil
}

func (m *BTCDelegationResponse) GetStakingOutputIdx() uint32 {
	if m != nil {
		return m.StakingOutputIdx
	}
	return 0
}

func (m *BTCDelegationResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *BTCDelegationResponse) GetStatusDesc() string {
	if m != nil {
		return m.StatusDesc
	}
	return ""
}

func (m *BTCDelegationResponse) GetUnbondingTime() uint32 {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *BTCDelegationResponse) GetUndelegationResponse() *BTCUndelegationResponse {
	if m != nil {
		return m.UndelegationResponse
	}
	return nil
}

func (m *BTCDelegationResponse) GetParamsVersion() uint32 {
	if m != nil {
		return m.ParamsVersion
	}
	return 0
}

// BTCUndelegationResponse provides all necessary info about the undeleagation
type BTCUndelegationResponse struct {
	// unbonding_tx is the transaction which will transfer the funds from staking
	// output to unbonding output. Unbonding output will usually have lower timelock
	// than staking output. The unbonding tx as string hex.
	UnbondingTxHex string `protobuf:"bytes,1,opt,name=unbonding_tx_hex,json=unbondingTxHex,proto3" json:"unbonding_tx_hex,omitempty"`
	// delegator_unbonding_sig is the signature on the unbonding tx
	// by the delegator (i.e., SK corresponding to btc_pk).
	// It effectively proves that the delegator wants to unbond and thus
	// Babylon will consider this BTC delegation unbonded. Delegator's BTC
	// on Bitcoin will be unbonded after timelock. The unbonding delegator sig as string hex.
	DelegatorUnbondingSigHex string `protobuf:"bytes,2,opt,name=delegator_unbonding_sig_hex,json=delegatorUnbondingSigHex,proto3" json:"delegator_unbonding_sig_hex,omitempty"`
	// covenant_unbonding_sig_list is the list of signatures on the unbonding tx
	// by covenant members
	CovenantUnbondingSigList []*SignatureInfo `protobuf:"bytes,3,rep,name=covenant_unbonding_sig_list,json=covenantUnbondingSigList,proto3" json:"covenant_unbonding_sig_list,omitempty"`
	// slashingTxHex is the hex string of slashing tx
	SlashingTxHex string `protobuf:"bytes,4,opt,name=slashing_tx_hex,json=slashingTxHex,proto3" json:"slashing_tx_hex,omitempty"`
	// delegator_slashing_sig is the signature on the slashing tx
	// by the delegator (i.e., SK corresponding to btc_pk).
	// It will be a part of the witness for the unbonding tx output.
	// The delegator slashing sig as string hex.
	DelegatorSlashingSigHex string `protobuf:"bytes,5,opt,name=delegator_slashing_sig_hex,json=delegatorSlashingSigHex,proto3" json:"delegator_slashing_sig_hex,omitempty"`
	// covenant_slashing_sigs is a list of adaptor signatures on the
	// unbonding slashing tx by each covenant member
	// It will be a part of the witness for the staking tx output.
	CovenantSlashingSigs []*CovenantAdaptorSignatures `protobuf:"bytes,6,rep,name=covenant_slashing_sigs,json=covenantSlashingSigs,proto3" json:"covenant_slashing_sigs,omitempty"`
}

func (m *BTCUndelegationResponse) Reset()         { *m = BTCUndelegationResponse{} }
func (m *BTCUndelegationResponse) String() string { return proto.CompactTextString(m) }
func (*BTCUndelegationResponse) ProtoMessage()    {}
func (*BTCUndelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{23}
}
func (m *BTCUndelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCUndelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCUndelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCUndelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCUndelegationResponse.Merge(m, src)
}
func (m *BTCUndelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *BTCUndelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCUndelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCUndelegationResponse proto.InternalMessageInfo

func (m *BTCUndelegationResponse) GetUnbondingTxHex() string {
	if m != nil {
		return m.UnbondingTxHex
	}
	return ""
}

func (m *BTCUndelegationResponse) GetDelegatorUnbondingSigHex() string {
	if m != nil {
		return m.DelegatorUnbondingSigHex
	}
	return ""
}

func (m *BTCUndelegationResponse) GetCovenantUnbondingSigList() []*SignatureInfo {
	if m != nil {
		return m.CovenantUnbondingSigList
	}
	return nil
}

func (m *BTCUndelegationResponse) GetSlashingTxHex() string {
	if m != nil {
		return m.SlashingTxHex
	}
	return ""
}

func (m *BTCUndelegationResponse) GetDelegatorSlashingSigHex() string {
	if m != nil {
		return m.DelegatorSlashingSigHex
	}
	return ""
}

func (m *BTCUndelegationResponse) GetCovenantSlashingSigs() []*CovenantAdaptorSignatures {
	if m != nil {
		return m.CovenantSlashingSigs
	}
	return nil
}

// BTCDelegatorDelegationsResponse is a collection of BTC delegations responses from the same delegator.
type BTCDelegatorDelegationsResponse struct {
	Dels []*BTCDelegationResponse `protobuf:"bytes,1,rep,name=dels,proto3" json:"dels,omitempty"`
}

func (m *BTCDelegatorDelegationsResponse) Reset()         { *m = BTCDelegatorDelegationsResponse{} }
func (m *BTCDelegatorDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*BTCDelegatorDelegationsResponse) ProtoMessage()    {}
func (*BTCDelegatorDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{24}
}
func (m *BTCDelegatorDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegatorDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegatorDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegatorDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegatorDelegationsResponse.Merge(m, src)
}
func (m *BTCDelegatorDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegatorDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegatorDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegatorDelegationsResponse proto.InternalMessageInfo

func (m *BTCDelegatorDelegationsResponse) GetDels() []*BTCDelegationResponse {
	if m != nil {
		return m.Dels
	}
	return nil
}

// FinalityProviderResponse defines a finality provider with voting power information.
type FinalityProviderResponse struct {
	// description defines the description terms for the finality provider.
	Description *types.Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate of the finality provider.
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
	// babylon_pk is the Babylon secp256k1 PK of this finality provider
	BabylonPk *secp256k1.PubKey `protobuf:"bytes,3,opt,name=babylon_pk,json=babylonPk,proto3" json:"babylon_pk,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of this finality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,4,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// pop is the proof of possession of babylon_pk and btc_pk
	Pop *ProofOfPossession `protobuf:"bytes,5,opt,name=pop,proto3" json:"pop,omitempty"`
	// master_pub_rand is the master public randomness of the finality provider
	// encoded as a base58 string
	MasterPubRand string `protobuf:"bytes,6,opt,name=master_pub_rand,json=masterPubRand,proto3" json:"master_pub_rand,omitempty"`
	// registered_epoch is the epoch when this finality provider is registered
	RegisteredEpoch uint64 `protobuf:"varint,7,opt,name=registered_epoch,json=registeredEpoch,proto3" json:"registered_epoch,omitempty"`
	// slashed_babylon_height indicates the Babylon height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBabylonHeight uint64 `protobuf:"varint,8,opt,name=slashed_babylon_height,json=slashedBabylonHeight,proto3" json:"slashed_babylon_height,omitempty"`
	// slashed_btc_height indicates the BTC height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBtcHeight uint64 `protobuf:"varint,9,opt,name=slashed_btc_height,json=slashedBtcHeight,proto3" json:"slashed_btc_height,omitempty"`
	// height is the queried Babylon height
	Height uint64 `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	// voting_power is the voting power of this finality provider at the given height
	VotingPower uint64 `protobuf:"varint,11,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *FinalityProviderResponse) Reset()         { *m = FinalityProviderResponse{} }
func (m *FinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderResponse) ProtoMessage()    {}
func (*FinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{25}
}
func (m *FinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderResponse.Merge(m, src)
}
func (m *FinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderResponse proto.InternalMessageInfo

func (m *FinalityProviderResponse) GetDescription() *types.Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *FinalityProviderResponse) GetBabylonPk() *secp256k1.PubKey {
	if m != nil {
		return m.BabylonPk
	}
	return nil
}

func (m *FinalityProviderResponse) GetPop() *ProofOfPossession {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *FinalityProviderResponse) GetMasterPubRand() string {
	if m != nil {
		return m.MasterPubRand
	}
	return ""
}

func (m *FinalityProviderResponse) GetRegisteredEpoch() uint64 {
	if m != nil {
		return m.RegisteredEpoch
	}
	return 0
}

func (m *FinalityProviderResponse) GetSlashedBabylonHeight() uint64 {
	if m != nil {
		return m.SlashedBabylonHeight
	}
	return 0
}

func (m *FinalityProviderResponse) GetSlashedBtcHeight() uint64 {
	if m != nil {
		return m.SlashedBtcHeight
	}
	return 0
}

func (m *FinalityProviderResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FinalityProviderResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.btcstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.btcstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryParamsByVersionRequest)(nil), "babylon.btcstaking.v1.QueryParamsByVersionRequest")
	proto.RegisterType((*QueryParamsByVersionResponse)(nil), "babylon.btcstaking.v1.QueryParamsByVersionResponse")
	proto.RegisterType((*QueryFinalityProvidersRequest)(nil), "babylon.btcstaking.v1.QueryFinalityProvidersRequest")
	proto.RegisterType((*QueryFinalityProvidersResponse)(nil), "babylon.btcstaking.v1.QueryFinalityProvidersResponse")
	proto.RegisterType((*QueryFinalityProviderRequest)(nil), "babylon.btcstaking.v1.QueryFinalityProviderRequest")
	proto.RegisterType((*QueryFinalityProviderResponse)(nil), "babylon.btcstaking.v1.QueryFinalityProviderResponse")
	proto.RegisterType((*QueryBTCDelegationsRequest)(nil), "babylon.btcstaking.v1.QueryBTCDelegationsRequest")
	proto.RegisterType((*QueryBTCDelegationsResponse)(nil), "babylon.btcstaking.v1.QueryBTCDelegationsResponse")
	proto.RegisterType((*QueryFinalityProviderPowerAtHeightRequest)(nil), "babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightRequest")
	proto.RegisterType((*QueryFinalityProviderPowerAtHeightResponse)(nil), "babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightResponse")
	proto.RegisterType((*QueryFinalityProviderCurrentPowerRequest)(nil), "babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerRequest")
	proto.RegisterType((*QueryFinalityProviderCurrentPowerResponse)(nil), "babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerResponse")
	proto.RegisterType((*QueryActiveFinalityProvidersAtHeightRequest)(nil), "babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightRequest")
	proto.RegisterType((*QueryActiveFinalityProvidersAtHeightResponse)(nil), "babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightResponse")
	proto.RegisterType((*QueryActivatedHeightRequest)(nil), "babylon.btcstaking.v1.QueryActivatedHeightRequest")
	proto.RegisterType((*QueryActivatedHeightResponse)(nil), "babylon.btcstaking.v1.QueryActivatedHeightResponse")
	proto.RegisterType((*QueryFinalityProviderDelegationsRequest)(nil), "babylon.btcstaking.v1.QueryFinalityProviderDelegationsRequest")
	proto.RegisterType((*QueryFinalityProviderDelegationsResponse)(nil), "babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse")
	proto.RegisterType((*QueryBTCDelegationRequest)(nil), "babylon.btcstaking.v1.QueryBTCDelegationRequest")
	proto.RegisterType((*QueryBTCDelegationResponse)(nil), "babylon.btcstaking.v1.QueryBTCDelegationResponse")
	proto.RegisterType((*BTCDelegationResponse)(nil), "babylon.btcstaking.v1.BTCDelegationResponse")
	proto.RegisterType((*BTCUndelegationResponse)(nil), "babylon.btcstaking.v1.BTCUndelegationResponse")
	proto.RegisterType((*BTCDelegatorDelegationsResponse)(nil), "babylon.btcstaking.v1.BTCDelegatorDelegationsResponse")
	proto.RegisterType((*FinalityProviderResponse)(nil), "babylon.btcstaking.v1.FinalityProviderResponse")
}

func init() { proto.RegisterFile("babylon/btcstaking/v1/query.proto", fileDescriptor_74d49d26f7429697) }

var fileDescriptor_74d49d26f7429697 = []byte{
	// 1916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4f, 0x6c, 0x13, 0xd9,
	0x19, 0x67, 0x12, 0xe3, 0x25, 0x9f, 0xe3, 0x24, 0xbc, 0x0d, 0x60, 0x1c, 0x12, 0xc3, 0x94, 0x85,
	0x84, 0x05, 0x0f, 0x31, 0x81, 0x4a, 0xbb, 0x2d, 0x10, 0x13, 0x16, 0xd8, 0x25, 0xc2, 0x9d, 0x40,
	0x2b, 0x75, 0xab, 0x8e, 0xc6, 0xe3, 0xe7, 0xf1, 0x28, 0xf6, 0xcc, 0x30, 0xef, 0x39, 0xb5, 0x85,
	0x72, 0xe9, 0xa1, 0xb7, 0x4a, 0x95, 0xda, 0x43, 0x2f, 0x3d, 0xb7, 0x52, 0x8f, 0xdd, 0x53, 0xa5,
	0xde, 0xb7, 0xb7, 0xd5, 0xf6, 0xd0, 0x6a, 0x0f, 0xa8, 0x82, 0xaa, 0x95, 0x2a, 0x71, 0xed, 0xb9,
	0x9a, 0xf7, 0xde, 0x78, 0xc6, 0xf6, 0x8c, 0x63, 0x27, 0xd9, 0x5b, 0xfc, 0xde, 0xf7, 0xff, 0xfb,
	0xbd, 0xdf, 0x9b, 0xf7, 0x05, 0x2e, 0x55, 0xf5, 0x6a, 0xb7, 0xe9, 0xd8, 0x4a, 0x95, 0x1a, 0x84,
	0xea, 0xbb, 0x96, 0x6d, 0x2a, 0x7b, 0xeb, 0xca, 0xcb, 0x36, 0xf6, 0xba, 0x45, 0xd7, 0x73, 0xa8,
	0x83, 0xce, 0x08, 0x91, 0x62, 0x28, 0x52, 0xdc, 0x5b, 0xcf, 0x2f, 0x9a, 0x8e, 0xe9, 0x30, 0x09,
	0xc5, 0xff, 0x8b, 0x0b, 0xe7, 0x2f, 0x98, 0x8e, 0x63, 0x36, 0xb1, 0xa2, 0xbb, 0x96, 0xa2, 0xdb,
	0xb6, 0x43, 0x75, 0x6a, 0x39, 0x36, 0x11, 0xbb, 0xe7, 0x0d, 0x87, 0xb4, 0x1c, 0xa2, 0x71, 0x35,
	0xfe, 0x43, 0x6c, 0xc9, 0xfc, 0x97, 0x62, 0x78, 0x5d, 0x97, 0x3a, 0x0a, 0xc1, 0x86, 0x5b, 0xba,
	0x7d, 0x67, 0x77, 0x5d, 0xd9, 0xc5, 0xdd, 0x40, 0xe6, 0xb2, 0x90, 0x09, 0x03, 0xad, 0x62, 0xaa,
	0xaf, 0x07, 0xbf, 0x85, 0xd4, 0x35, 0x21, 0x55, 0xd5, 0x09, 0xe6, 0x89, 0xf4, 0x04, 0x5d, 0xdd,
	0xb4, 0x6c, 0x16, 0x51, 0xe0, 0x35, 0x3e, 0x7d, 0x57, 0xf7, 0xf4, 0x56, 0xe0, 0xf5, 0x4a, 0xbc,
	0x4c, 0xa4, 0x1a, 0x5c, 0xae, 0x90, 0x60, 0xcb, 0x71, 0xb9, 0x80, 0xbc, 0x08, 0xe8, 0x07, 0x7e,
	0x38, 0x15, 0x66, 0x5d, 0xc5, 0x2f, 0xdb, 0x98, 0x50, 0x59, 0x85, 0xf7, 0xfb, 0x56, 0x89, 0xeb,
	0xd8, 0x04, 0xa3, 0x8f, 0x21, 0xcd, 0xa3, 0xc8, 0x49, 0x17, 0xa5, 0xd5, 0x4c, 0x69, 0xb9, 0x18,
	0xdb, 0x86, 0x22, 0x57, 0x2b, 0xa7, 0xbe, 0x7c, 0x5d, 0x38, 0xa1, 0x0a, 0x15, 0xf9, 0xbb, 0xb0,
	0x14, 0xb1, 0x59, 0xee, 0xfe, 0x10, 0x7b, 0xc4, 0x72, 0x6c, 0xe1, 0x12, 0xe5, 0xe0, 0xbd, 0x3d,
	0xbe, 0xc2, 0x8c, 0x67, 0xd5, 0xe0, 0xa7, 0xfc, 0x39, 0x5c, 0x88, 0x57, 0x3c, 0x8e, 0xa8, 0x4c,
	0x58, 0x66, 0xc6, 0x3f, 0xb1, 0x6c, 0xbd, 0x69, 0xd1, 0x6e, 0xc5, 0x73, 0xf6, 0xac, 0x1a, 0xf6,
	0x82, 0x52, 0xa0, 0x4f, 0x00, 0xc2, 0x0e, 0x09, 0x0f, 0x57, 0x8a, 0x02, 0x26, 0x7e, 0x3b, 0x8b,
	0x1c, 0x97, 0xa2, 0x9d, 0xc5, 0x8a, 0x6e, 0x62, 0xa1, 0xab, 0x46, 0x34, 0xe5, 0xbf, 0x4a, 0xb0,
	0x92, 0xe4, 0x49, 0x24, 0xf2, 0x53, 0x40, 0x75, 0xb1, 0xe9, 0xa3, 0x91, 0xef, 0xe6, 0xa4, 0x8b,
	0xd3, 0xab, 0x99, 0x92, 0x92, 0x90, 0xd4, 0xa0, 0xb5, 0xc0, 0x98, 0x7a, 0xba, 0x3e, 0xe8, 0x07,
	0x3d, 0xea, 0x4b, 0x65, 0x8a, 0xa5, 0x72, 0xf5, 0xc0, 0x54, 0x84, 0xbd, 0x68, 0x2e, 0x9b, 0xa2,
	0x23, 0xc3, 0xce, 0x79, 0xcd, 0x2e, 0x41, 0xb6, 0xee, 0x6a, 0x55, 0x6a, 0x68, 0xee, 0xae, 0xd6,
	0xc0, 0x1d, 0x56, 0xb6, 0x19, 0x15, 0xea, 0x6e, 0x99, 0x1a, 0x95, 0xdd, 0xc7, 0xb8, 0x23, 0xef,
	0x27, 0xd4, 0xbd, 0x57, 0x8c, 0x9f, 0xc0, 0xe9, 0xa1, 0x62, 0x88, 0xf2, 0x4f, 0x5c, 0x8b, 0x85,
	0xc1, 0x5a, 0xc8, 0x7f, 0x90, 0x20, 0xcf, 0xfc, 0x97, 0x9f, 0x3f, 0xd8, 0xc2, 0x4d, 0x6c, 0x72,
	0x4a, 0x08, 0x12, 0x28, 0x43, 0x9a, 0x50, 0x9d, 0xb6, 0x39, 0xa4, 0xe6, 0x4a, 0xd7, 0x12, 0x3c,
	0xf6, 0x69, 0xef, 0x30, 0x0d, 0x55, 0x68, 0x0e, 0x00, 0x67, 0xea, 0xd0, 0xc0, 0xf9, 0x8b, 0x24,
	0x0e, 0xce, 0x60, 0xa8, 0xa2, 0x50, 0x2f, 0x60, 0xde, 0xaf, 0x74, 0x2d, 0xdc, 0x12, 0x90, 0xb9,
	0x3e, 0x4e, 0xd0, 0xbd, 0x1a, 0xcd, 0x55, 0xa9, 0x11, 0x31, 0x7f, 0x7c, 0x60, 0xa9, 0xc3, 0x5a,
	0x6c, 0xa7, 0x2b, 0xce, 0xcf, 0xb0, 0xb7, 0x49, 0x1f, 0x63, 0xcb, 0x6c, 0xd0, 0xf1, 0x91, 0x83,
	0xce, 0x42, 0xba, 0xc1, 0x74, 0x58, 0x50, 0x29, 0x55, 0xfc, 0x92, 0x9f, 0xc1, 0xb5, 0x71, 0xfc,
	0x88, 0xaa, 0x5d, 0x82, 0xd9, 0x3d, 0x87, 0x5a, 0xb6, 0xa9, 0xb9, 0xfe, 0x3e, 0xf3, 0x93, 0x52,
	0x33, 0x7c, 0x8d, 0xa9, 0xc8, 0xdb, 0xb0, 0x1a, 0x6b, 0xf0, 0x41, 0xdb, 0xf3, 0xb0, 0x4d, 0x99,
	0xd0, 0x04, 0x88, 0x4f, 0xaa, 0x43, 0xbf, 0x39, 0x11, 0x5e, 0x98, 0xa4, 0x14, 0x4d, 0x72, 0x28,
	0xec, 0xa9, 0xe1, 0xb0, 0x7f, 0x29, 0xc1, 0x87, 0xcc, 0xd1, 0xa6, 0x41, 0xad, 0x3d, 0x3c, 0x44,
	0x37, 0x83, 0x25, 0x4f, 0x72, 0x75, 0x5c, 0xf8, 0xfd, 0xbb, 0x04, 0xd7, 0xc7, 0x8b, 0xe7, 0x18,
	0x69, 0xf0, 0x47, 0x16, 0x6d, 0x6c, 0x63, 0xaa, 0x7f, 0xab, 0x34, 0xb8, 0x2c, 0x0e, 0x26, 0x4b,
	0x4c, 0xa7, 0xb8, 0xd6, 0x57, 0x58, 0xf9, 0x8e, 0x60, 0xc9, 0xa1, 0xed, 0xd1, 0x3d, 0x96, 0x7f,
	0x23, 0xc1, 0xd5, 0x58, 0xa4, 0xc4, 0x10, 0xd5, 0x18, 0xe7, 0xe5, 0xb8, 0xfa, 0xf8, 0x1f, 0x29,
	0xe1, 0x3c, 0xc4, 0x91, 0x92, 0x07, 0xe7, 0x23, 0xa4, 0xe4, 0x78, 0x31, 0xf4, 0x74, 0xe7, 0x40,
	0x7a, 0x72, 0xe2, 0x4c, 0xab, 0xe7, 0x42, 0xa2, 0xea, 0x13, 0x38, 0xbe, 0xbe, 0x7e, 0x0a, 0xe7,
	0x87, 0x09, 0x37, 0xa8, 0xf8, 0x0d, 0x78, 0x5f, 0x04, 0xab, 0xd1, 0x8e, 0xd6, 0xd0, 0x49, 0x23,
	0x52, 0xf7, 0x05, 0xb1, 0xf5, 0xbc, 0xf3, 0x58, 0x27, 0x0d, 0xff, 0xd4, 0xbf, 0x8c, 0xbb, 0x67,
	0x7a, 0x65, 0xda, 0x81, 0xb9, 0x7e, 0xee, 0x16, 0x37, 0xdc, 0x64, 0xd4, 0x9d, 0xed, 0xa3, 0x6e,
	0xf9, 0xb7, 0x69, 0x38, 0x13, 0xef, 0x6e, 0x1b, 0xd2, 0x1c, 0x2a, 0xcc, 0xcd, 0x6c, 0xf9, 0xce,
	0x37, 0xaf, 0x0b, 0x25, 0xd3, 0xa2, 0x8d, 0x76, 0xb5, 0x68, 0x38, 0x2d, 0x45, 0x38, 0x35, 0x1a,
	0xba, 0x65, 0x07, 0x3f, 0x14, 0xda, 0x75, 0x31, 0x29, 0x96, 0x9f, 0x54, 0x6e, 0x6d, 0xdc, 0xac,
	0xb4, 0xab, 0x9f, 0xe1, 0xae, 0x7a, 0xb2, 0xea, 0x83, 0x0b, 0x7d, 0x0e, 0x73, 0x21, 0xf8, 0x9a,
	0x16, 0xf1, 0x19, 0x79, 0xfa, 0x08, 0x66, 0x33, 0x02, 0xb5, 0x4f, 0x2d, 0x86, 0xec, 0x59, 0x42,
	0x75, 0x8f, 0x6a, 0xe2, 0x8c, 0x4c, 0x73, 0xa6, 0x63, 0x6b, 0xfc, 0x20, 0xa1, 0x65, 0x00, 0x6c,
	0xd7, 0x02, 0x81, 0x14, 0x13, 0x98, 0xc1, 0xb6, 0x38, 0x67, 0x68, 0x09, 0x66, 0xa8, 0x43, 0xf5,
	0xa6, 0x46, 0x74, 0x9a, 0x3b, 0xc9, 0x76, 0x4f, 0xb1, 0x85, 0x1d, 0x9d, 0xa2, 0xcb, 0x30, 0x17,
	0x6d, 0x23, 0xee, 0xe4, 0xd2, 0xac, 0x83, 0xb3, 0x61, 0x07, 0x71, 0x07, 0x5d, 0x81, 0x79, 0xd2,
	0xd4, 0x49, 0x23, 0x22, 0xf6, 0x1e, 0x13, 0xcb, 0x06, 0xcb, 0x5c, 0xee, 0x36, 0x9c, 0x0b, 0xa1,
	0xce, 0xb6, 0x34, 0x62, 0x99, 0x4c, 0xfe, 0x14, 0x93, 0x5f, 0xec, 0x6d, 0xef, 0xf8, 0xbb, 0x3b,
	0x96, 0xe9, 0xab, 0xbd, 0x80, 0xac, 0xe1, 0xec, 0x61, 0x5b, 0xb7, 0xa9, 0x2f, 0x4f, 0x72, 0x33,
	0xec, 0x64, 0xdc, 0x4c, 0xe8, 0xfe, 0x03, 0x21, 0xbb, 0x59, 0xd3, 0x5d, 0xdf, 0x92, 0x65, 0xda,
	0x3a, 0x6d, 0x7b, 0x98, 0xa8, 0xb3, 0x81, 0x99, 0x1d, 0xcb, 0x24, 0xe8, 0x3a, 0xa0, 0x20, 0x37,
	0xa7, 0x4d, 0xdd, 0x36, 0xd5, 0xac, 0x5a, 0x27, 0x07, 0xec, 0xab, 0x3a, 0x40, 0xe8, 0x33, 0xb6,
	0xf1, 0xa4, 0xc6, 0xee, 0x53, 0x9d, 0x31, 0x73, 0x2e, 0x73, 0x51, 0x5a, 0x3d, 0xa5, 0x8a, 0x5f,
	0xa8, 0x00, 0x19, 0xfe, 0x25, 0xa3, 0xd5, 0x30, 0x31, 0x72, 0xb3, 0x9c, 0x58, 0xf8, 0xd2, 0x16,
	0x26, 0x06, 0xfa, 0x00, 0xe6, 0xda, 0x76, 0xd5, 0xb1, 0x6b, 0xac, 0x3a, 0x56, 0x0b, 0xe7, 0xb2,
	0xcc, 0x45, 0xb6, 0xb7, 0xfa, 0xdc, 0x6a, 0x61, 0x64, 0xc0, 0x99, 0xb6, 0x1d, 0x22, 0x5c, 0xf3,
	0x04, 0x1a, 0x73, 0x73, 0x0c, 0xea, 0xc5, 0x64, 0xa8, 0xbf, 0x88, 0xa8, 0xf5, 0xc0, 0xbe, 0xd8,
	0x8e, 0x59, 0xf5, 0x63, 0xe1, 0x1f, 0xf4, 0x5a, 0xf0, 0x88, 0x98, 0xe7, 0xb1, 0xf0, 0x55, 0xf1,
	0x64, 0x90, 0xbf, 0x98, 0x86, 0x73, 0x09, 0x86, 0xd1, 0x2a, 0x2c, 0x44, 0xd2, 0xe9, 0x44, 0x4e,
	0x75, 0x98, 0x26, 0xef, 0xf6, 0xf7, 0x61, 0x29, 0xec, 0x76, 0xa8, 0x13, 0x74, 0x7c, 0x8a, 0x29,
	0xe5, 0x7a, 0x22, 0x2f, 0x02, 0x09, 0xd1, 0x75, 0x03, 0x96, 0x7a, 0x5d, 0xef, 0xd7, 0x66, 0x67,
	0x68, 0x9a, 0x61, 0xe0, 0x72, 0x42, 0x59, 0x7a, 0x4d, 0x7f, 0x62, 0xd7, 0x1d, 0x35, 0x17, 0x18,
	0x8a, 0xfa, 0x60, 0xc7, 0x27, 0x06, 0xb9, 0xa9, 0x38, 0xe4, 0x7e, 0x0c, 0xf9, 0x01, 0xe4, 0x46,
	0x53, 0x39, 0xc9, 0x54, 0xce, 0xf5, 0x83, 0x37, 0xcc, 0xa4, 0x0e, 0x67, 0x43, 0xfc, 0x46, 0x74,
	0x49, 0x2e, 0x7d, 0x48, 0x20, 0x2f, 0xf6, 0x80, 0x1c, 0x7a, 0x22, 0xb2, 0x01, 0x85, 0x03, 0x6e,
	0x05, 0x74, 0x1f, 0x52, 0x35, 0xdc, 0x3c, 0xdc, 0xa7, 0x2f, 0xd3, 0x94, 0xdf, 0xa5, 0x20, 0x97,
	0xf8, 0x1a, 0x79, 0x08, 0x19, 0xff, 0x14, 0x78, 0x96, 0x1b, 0x61, 0xe9, 0xef, 0x04, 0x97, 0x4b,
	0xe8, 0x81, 0xdf, 0x2c, 0x5b, 0xa1, 0xa8, 0x1a, 0xd5, 0x43, 0xdb, 0x00, 0x86, 0xd3, 0x6a, 0x59,
	0x84, 0x04, 0x57, 0xd4, 0x4c, 0xf9, 0xc6, 0x37, 0xaf, 0x0b, 0x4b, 0xdc, 0x10, 0xa9, 0xed, 0x16,
	0x2d, 0x47, 0x69, 0xe9, 0xb4, 0x51, 0x7c, 0x8a, 0x4d, 0xdd, 0xe8, 0x6e, 0x61, 0xe3, 0xeb, 0x2f,
	0x6e, 0x80, 0xf0, 0xb3, 0x85, 0x0d, 0x35, 0x62, 0x00, 0xdd, 0x05, 0x10, 0x79, 0xfa, 0x9c, 0x3e,
	0xcd, 0x82, 0x2a, 0x04, 0x41, 0xf1, 0xa1, 0x45, 0xb1, 0x37, 0xb4, 0x28, 0x0a, 0x96, 0x9d, 0x11,
	0x2a, 0x95, 0xdd, 0xc8, 0x7d, 0x90, 0x3a, 0x8e, 0xfb, 0xe0, 0x23, 0x98, 0x76, 0x1d, 0x97, 0x81,
	0x26, 0x53, 0x5a, 0x4d, 0x7a, 0x85, 0x7b, 0x8e, 0x53, 0x7f, 0x56, 0xaf, 0x38, 0x84, 0x60, 0x96,
	0x85, 0xea, 0x2b, 0xf9, 0x78, 0x6d, 0xe9, 0x84, 0x62, 0x4f, 0x73, 0xdb, 0x55, 0xcd, 0xd3, 0xed,
	0x9a, 0x20, 0xe4, 0x2c, 0x5f, 0xae, 0xb4, 0xab, 0xaa, 0x6e, 0xd7, 0xd0, 0x1a, 0x2c, 0x78, 0xd8,
	0xb4, 0xfc, 0x25, 0x5c, 0xd3, 0xb0, 0xeb, 0x18, 0x0d, 0x46, 0xc9, 0x29, 0x75, 0x3e, 0x5c, 0x7f,
	0xe8, 0x2f, 0xa3, 0x0d, 0x38, 0xcb, 0x40, 0x89, 0x6b, 0x5a, 0x50, 0x25, 0x71, 0x55, 0x9c, 0x62,
	0x0a, 0x8b, 0x62, 0xb7, 0xcc, 0x37, 0xc5, 0xad, 0xe1, 0x93, 0x67, 0xa0, 0x45, 0x8d, 0x40, 0x63,
	0x86, 0x69, 0x2c, 0x04, 0x1a, 0xd4, 0x10, 0xd2, 0xe1, 0x37, 0x1c, 0x8c, 0xfc, 0x4e, 0xcf, 0x0c,
	0x7d, 0xa7, 0x97, 0x7e, 0x77, 0x1a, 0x4e, 0xb2, 0x4f, 0x03, 0xf4, 0x0b, 0x09, 0xd2, 0x7c, 0x38,
	0x81, 0xd6, 0x12, 0xaa, 0x36, 0x3c, 0xa3, 0xc9, 0x5f, 0x1b, 0x47, 0x94, 0xc3, 0x57, 0xfe, 0xe0,
	0xe7, 0x7f, 0xfb, 0xd7, 0xaf, 0xa7, 0x0a, 0x68, 0x59, 0x19, 0x35, 0x5b, 0x42, 0x7f, 0x94, 0x60,
	0x7e, 0x60, 0xca, 0x82, 0x4a, 0x07, 0xbb, 0x19, 0x9c, 0xe5, 0xe4, 0x6f, 0x4d, 0xa4, 0x23, 0x62,
	0x54, 0x58, 0x8c, 0x6b, 0xe8, 0xea, 0xc8, 0x18, 0x95, 0x57, 0x82, 0xe0, 0xf7, 0xd1, 0x9f, 0x24,
	0x38, 0x3d, 0xf4, 0x9a, 0x40, 0x1b, 0xa3, 0x7c, 0x27, 0x4d, 0x79, 0xf2, 0xb7, 0x27, 0xd4, 0x12,
	0x31, 0xaf, 0xb3, 0x98, 0x3f, 0x44, 0x6b, 0x09, 0x31, 0x0f, 0xbf, 0x63, 0xd0, 0xd7, 0x12, 0x2c,
	0x0c, 0x1a, 0x44, 0xb7, 0x26, 0x71, 0x1f, 0xc4, 0xbc, 0x31, 0x99, 0x92, 0x08, 0x79, 0x87, 0x85,
	0xbc, 0x8d, 0x3e, 0x1b, 0x3b, 0x64, 0xe5, 0x55, 0xdf, 0x13, 0x63, 0x7f, 0x58, 0x04, 0xfd, 0x5e,
	0x82, 0xb9, 0xfe, 0xf1, 0x04, 0x5a, 0x1f, 0x15, 0x5d, 0xec, 0xd4, 0x25, 0x5f, 0x9a, 0x44, 0x45,
	0xa4, 0x53, 0x64, 0xe9, 0xac, 0xa2, 0x2b, 0x4a, 0xe2, 0x44, 0x34, 0xfa, 0xf6, 0x40, 0xff, 0x96,
	0xa0, 0x70, 0xc0, 0x43, 0x14, 0x95, 0x47, 0xc5, 0x31, 0xde, 0xab, 0x3a, 0xff, 0xe0, 0x48, 0x36,
	0x44, 0x72, 0x1f, 0xb1, 0xe4, 0x36, 0x50, 0x69, 0x82, 0x5e, 0x71, 0x02, 0xda, 0x47, 0xff, 0x93,
	0x60, 0x79, 0xe4, 0x28, 0x04, 0xdd, 0x9f, 0x04, 0x3f, 0x71, 0xd3, 0x9a, 0xfc, 0xe6, 0x11, 0x2c,
	0x88, 0x14, 0x2b, 0x2c, 0xc5, 0x4f, 0xd1, 0xe3, 0xc3, 0xc3, 0x91, 0x31, 0x6c, 0x98, 0xf8, 0x7f,
	0x25, 0xb8, 0x30, 0x6a, 0xc6, 0x82, 0xee, 0x4d, 0x12, 0x75, 0xcc, 0xb0, 0x27, 0x7f, 0xff, 0xf0,
	0x06, 0x44, 0xd6, 0x8f, 0x58, 0xd6, 0x9b, 0xe8, 0xde, 0x11, 0xb3, 0x66, 0x8c, 0x3d, 0x30, 0x5f,
	0x18, 0xcd, 0xd8, 0xf1, 0xb3, 0x8a, 0xd1, 0x8c, 0x9d, 0x30, 0xc0, 0x38, 0x90, 0xb1, 0xf5, 0x40,
	0x4f, 0xdc, 0xa2, 0xe8, 0x9d, 0x04, 0x4b, 0x23, 0xa6, 0x07, 0xe8, 0xee, 0x24, 0x85, 0x8d, 0x21,
	0x90, 0x7b, 0x87, 0xd6, 0x17, 0x19, 0x6d, 0xb3, 0x8c, 0x1e, 0xa1, 0x87, 0x87, 0xef, 0x4b, 0x94,
	0x6c, 0xfe, 0x2c, 0x41, 0xb6, 0x8f, 0xb7, 0xd0, 0xcd, 0xb1, 0x29, 0x2e, 0xc8, 0x69, 0x7d, 0x02,
	0x0d, 0x91, 0xc5, 0x16, 0xcb, 0xe2, 0x2e, 0xfa, 0xde, 0x78, 0x9c, 0xa8, 0xbc, 0x8a, 0x19, 0x68,
	0xec, 0x97, 0x9f, 0x7e, 0xf9, 0x66, 0x45, 0xfa, 0xea, 0xcd, 0x8a, 0xf4, 0xcf, 0x37, 0x2b, 0xd2,
	0xaf, 0xde, 0xae, 0x9c, 0xf8, 0xea, 0xed, 0xca, 0x89, 0x7f, 0xbc, 0x5d, 0x39, 0xf1, 0xe3, 0x03,
	0x3f, 0x11, 0x3b, 0x51, 0x87, 0xec, 0x7b, 0xb1, 0x9a, 0x66, 0xff, 0x6e, 0xba, 0xf5, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf5, 0xa2, 0xf3, 0xc9, 0xdc, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ParamsByVersion queries the parameters of the module for a specific version of past params.
	ParamsByVersion(ctx context.Context, in *QueryParamsByVersionRequest, opts ...grpc.CallOption) (*QueryParamsByVersionResponse, error)
	// FinalityProviders queries all finality providers
	FinalityProviders(ctx context.Context, in *QueryFinalityProvidersRequest, opts ...grpc.CallOption) (*QueryFinalityProvidersResponse, error)
	// FinalityProvider info about one finality provider
	FinalityProvider(ctx context.Context, in *QueryFinalityProviderRequest, opts ...grpc.CallOption) (*QueryFinalityProviderResponse, error)
	// BTCDelegations queries all BTC delegations under a given status
	BTCDelegations(ctx context.Context, in *QueryBTCDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCDelegationsResponse, error)
	// ActiveFinalityProvidersAtHeight queries finality providers with non zero voting power at given height.
	ActiveFinalityProvidersAtHeight(ctx context.Context, in *QueryActiveFinalityProvidersAtHeightRequest, opts ...grpc.CallOption) (*QueryActiveFinalityProvidersAtHeightResponse, error)
	// FinalityProviderPowerAtHeight queries the voting power of a finality provider at a given height
	FinalityProviderPowerAtHeight(ctx context.Context, in *QueryFinalityProviderPowerAtHeightRequest, opts ...grpc.CallOption) (*QueryFinalityProviderPowerAtHeightResponse, error)
	// FinalityProviderCurrentPower queries the voting power of a finality provider at the current height
	FinalityProviderCurrentPower(ctx context.Context, in *QueryFinalityProviderCurrentPowerRequest, opts ...grpc.CallOption) (*QueryFinalityProviderCurrentPowerResponse, error)
	// ActivatedHeight queries the height when BTC staking protocol is activated, i.e., the first height when
	// there exists 1 finality provider with voting power
	ActivatedHeight(ctx context.Context, in *QueryActivatedHeightRequest, opts ...grpc.CallOption) (*QueryActivatedHeightResponse, error)
	// FinalityProviderDelegations queries all BTC delegations of the given finality provider
	FinalityProviderDelegations(ctx context.Context, in *QueryFinalityProviderDelegationsRequest, opts ...grpc.CallOption) (*QueryFinalityProviderDelegationsResponse, error)
	// BTCDelegation retrieves delegation by corresponding staking tx hash
	BTCDelegation(ctx context.Context, in *QueryBTCDelegationRequest, opts ...grpc.CallOption) (*QueryBTCDelegationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParamsByVersion(ctx context.Context, in *QueryParamsByVersionRequest, opts ...grpc.CallOption) (*QueryParamsByVersionResponse, error) {
	out := new(QueryParamsByVersionResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/ParamsByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviders(ctx context.Context, in *QueryFinalityProvidersRequest, opts ...grpc.CallOption) (*QueryFinalityProvidersResponse, error) {
	out := new(QueryFinalityProvidersResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/FinalityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProvider(ctx context.Context, in *QueryFinalityProviderRequest, opts ...grpc.CallOption) (*QueryFinalityProviderResponse, error) {
	out := new(QueryFinalityProviderResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/FinalityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCDelegations(ctx context.Context, in *QueryBTCDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCDelegationsResponse, error) {
	out := new(QueryBTCDelegationsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveFinalityProvidersAtHeight(ctx context.Context, in *QueryActiveFinalityProvidersAtHeightRequest, opts ...grpc.CallOption) (*QueryActiveFinalityProvidersAtHeightResponse, error) {
	out := new(QueryActiveFinalityProvidersAtHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/ActiveFinalityProvidersAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviderPowerAtHeight(ctx context.Context, in *QueryFinalityProviderPowerAtHeightRequest, opts ...grpc.CallOption) (*QueryFinalityProviderPowerAtHeightResponse, error) {
	out := new(QueryFinalityProviderPowerAtHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/FinalityProviderPowerAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviderCurrentPower(ctx context.Context, in *QueryFinalityProviderCurrentPowerRequest, opts ...grpc.CallOption) (*QueryFinalityProviderCurrentPowerResponse, error) {
	out := new(QueryFinalityProviderCurrentPowerResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/FinalityProviderCurrentPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActivatedHeight(ctx context.Context, in *QueryActivatedHeightRequest, opts ...grpc.CallOption) (*QueryActivatedHeightResponse, error) {
	out := new(QueryActivatedHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/ActivatedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviderDelegations(ctx context.Context, in *QueryFinalityProviderDelegationsRequest, opts ...grpc.CallOption) (*QueryFinalityProviderDelegationsResponse, error) {
	out := new(QueryFinalityProviderDelegationsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/FinalityProviderDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCDelegation(ctx context.Context, in *QueryBTCDelegationRequest, opts ...grpc.CallOption) (*QueryBTCDelegationResponse, error) {
	out := new(QueryBTCDelegationResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ParamsByVersion queries the parameters of the module for a specific version of past params.
	ParamsByVersion(context.Context, *QueryParamsByVersionRequest) (*QueryParamsByVersionResponse, error)
	// FinalityProviders queries all finality providers
	FinalityProviders(context.Context, *QueryFinalityProvidersRequest) (*QueryFinalityProvidersResponse, error)
	// FinalityProvider info about one finality provider
	FinalityProvider(context.Context, *QueryFinalityProviderRequest) (*QueryFinalityProviderResponse, error)
	// BTCDelegations queries all BTC delegations under a given status
	BTCDelegations(context.Context, *QueryBTCDelegationsRequest) (*QueryBTCDelegationsResponse, error)
	// ActiveFinalityProvidersAtHeight queries finality providers with non zero voting power at given height.
	ActiveFinalityProvidersAtHeight(context.Context, *QueryActiveFinalityProvidersAtHeightRequest) (*QueryActiveFinalityProvidersAtHeightResponse, error)
	// FinalityProviderPowerAtHeight queries the voting power of a finality provider at a given height
	FinalityProviderPowerAtHeight(context.Context, *QueryFinalityProviderPowerAtHeightRequest) (*QueryFinalityProviderPowerAtHeightResponse, error)
	// FinalityProviderCurrentPower queries the voting power of a finality provider at the current height
	FinalityProviderCurrentPower(context.Context, *QueryFinalityProviderCurrentPowerRequest) (*QueryFinalityProviderCurrentPowerResponse, error)
	// ActivatedHeight queries the height when BTC staking protocol is activated, i.e., the first height when
	// there exists 1 finality provider with voting power
	ActivatedHeight(context.Context, *QueryActivatedHeightRequest) (*QueryActivatedHeightResponse, error)
	// FinalityProviderDelegations queries all BTC delegations of the given finality provider
	FinalityProviderDelegations(context.Context, *QueryFinalityProviderDelegationsRequest) (*QueryFinalityProviderDelegationsResponse, error)
	// BTCDelegation retrieves delegation by corresponding staking tx hash
	BTCDelegation(context.Context, *QueryBTCDelegationRequest) (*QueryBTCDelegationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ParamsByVersion(ctx context.Context, req *QueryParamsByVersionRequest) (*QueryParamsByVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamsByVersion not implemented")
}
func (*UnimplementedQueryServer) FinalityProviders(ctx context.Context, req *QueryFinalityProvidersRequest) (*QueryFinalityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviders not implemented")
}
func (*UnimplementedQueryServer) FinalityProvider(ctx context.Context, req *QueryFinalityProviderRequest) (*QueryFinalityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProvider not implemented")
}
func (*UnimplementedQueryServer) BTCDelegations(ctx context.Context, req *QueryBTCDelegationsRequest) (*QueryBTCDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCDelegations not implemented")
}
func (*UnimplementedQueryServer) ActiveFinalityProvidersAtHeight(ctx context.Context, req *QueryActiveFinalityProvidersAtHeightRequest) (*QueryActiveFinalityProvidersAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveFinalityProvidersAtHeight not implemented")
}
func (*UnimplementedQueryServer) FinalityProviderPowerAtHeight(ctx context.Context, req *QueryFinalityProviderPowerAtHeightRequest) (*QueryFinalityProviderPowerAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviderPowerAtHeight not implemented")
}
func (*UnimplementedQueryServer) FinalityProviderCurrentPower(ctx context.Context, req *QueryFinalityProviderCurrentPowerRequest) (*QueryFinalityProviderCurrentPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviderCurrentPower not implemented")
}
func (*UnimplementedQueryServer) ActivatedHeight(ctx context.Context, req *QueryActivatedHeightRequest) (*QueryActivatedHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatedHeight not implemented")
}
func (*UnimplementedQueryServer) FinalityProviderDelegations(ctx context.Context, req *QueryFinalityProviderDelegationsRequest) (*QueryFinalityProviderDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviderDelegations not implemented")
}
func (*UnimplementedQueryServer) BTCDelegation(ctx context.Context, req *QueryBTCDelegationRequest) (*QueryBTCDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCDelegation not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParamsByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParamsByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/ParamsByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParamsByVersion(ctx, req.(*QueryParamsByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/FinalityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviders(ctx, req.(*QueryFinalityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/FinalityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProvider(ctx, req.(*QueryFinalityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCDelegations(ctx, req.(*QueryBTCDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveFinalityProvidersAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveFinalityProvidersAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveFinalityProvidersAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/ActiveFinalityProvidersAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveFinalityProvidersAtHeight(ctx, req.(*QueryActiveFinalityProvidersAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviderPowerAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderPowerAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviderPowerAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/FinalityProviderPowerAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviderPowerAtHeight(ctx, req.(*QueryFinalityProviderPowerAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviderCurrentPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderCurrentPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviderCurrentPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/FinalityProviderCurrentPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviderCurrentPower(ctx, req.(*QueryFinalityProviderCurrentPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActivatedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivatedHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActivatedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/ActivatedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActivatedHeight(ctx, req.(*QueryActivatedHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviderDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviderDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/FinalityProviderDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviderDelegations(ctx, req.(*QueryFinalityProviderDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCDelegation(ctx, req.(*QueryBTCDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.btcstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ParamsByVersion",
			Handler:    _Query_ParamsByVersion_Handler,
		},
		{
			MethodName: "FinalityProviders",
			Handler:    _Query_FinalityProviders_Handler,
		},
		{
			MethodName: "FinalityProvider",
			Handler:    _Query_FinalityProvider_Handler,
		},
		{
			MethodName: "BTCDelegations",
			Handler:    _Query_BTCDelegations_Handler,
		},
		{
			MethodName: "ActiveFinalityProvidersAtHeight",
			Handler:    _Query_ActiveFinalityProvidersAtHeight_Handler,
		},
		{
			MethodName: "FinalityProviderPowerAtHeight",
			Handler:    _Query_FinalityProviderPowerAtHeight_Handler,
		},
		{
			MethodName: "FinalityProviderCurrentPower",
			Handler:    _Query_FinalityProviderCurrentPower_Handler,
		},
		{
			MethodName: "ActivatedHeight",
			Handler:    _Query_ActivatedHeight_Handler,
		},
		{
			MethodName: "FinalityProviderDelegations",
			Handler:    _Query_FinalityProviderDelegations_Handler,
		},
		{
			MethodName: "BTCDelegation",
			Handler:    _Query_BTCDelegation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/btcstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsByVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsByVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsByVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsByVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsByVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsByVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalityProviders) > 0 {
		for iNdEx := len(m.FinalityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalityProvider != nil {
		{
			size, err := m.FinalityProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcDelegations) > 0 {
		for iNdEx := len(m.BtcDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderPowerAtHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderPowerAtHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderPowerAtHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderPowerAtHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderPowerAtHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderPowerAtHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderCurrentPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderCurrentPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderCurrentPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderCurrentPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderCurrentPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderCurrentPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalityProviders) > 0 {
		for iNdEx := len(m.FinalityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActivatedHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivatedHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivatedHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActivatedHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivatedHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivatedHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcDelegatorDelegations) > 0 {
		for iNdEx := len(m.BtcDelegatorDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegatorDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingTxHashHex) > 0 {
		i -= len(m.StakingTxHashHex)
		copy(dAtA[i:], m.StakingTxHashHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingTxHashHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BtcDelegation != nil {
		{
			size, err := m.BtcDelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParamsVersion != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParamsVersion))
		i--
		dAtA[i] = 0x78
	}
	if m.UndelegationResponse != nil {
		{
			size, err := m.UndelegationResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.UnbondingTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingTime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.StatusDesc) > 0 {
		i -= len(m.StatusDesc)
		copy(dAtA[i:], m.StatusDesc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusDesc)))
		i--
		dAtA[i] = 0x62
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.StakingOutputIdx != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakingOutputIdx))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CovenantSigs) > 0 {
		for iNdEx := len(m.CovenantSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DelegatorSlashSigHex) > 0 {
		i -= len(m.DelegatorSlashSigHex)
		copy(dAtA[i:], m.DelegatorSlashSigHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorSlashSigHex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SlashingTxHex) > 0 {
		i -= len(m.SlashingTxHex)
		copy(dAtA[i:], m.SlashingTxHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SlashingTxHex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingTxHex) > 0 {
		i -= len(m.StakingTxHex)
		copy(dAtA[i:], m.StakingTxHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingTxHex)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalSat != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalSat))
		i--
		dAtA[i] = 0x28
	}
	if m.EndHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FpBtcPkList) > 0 {
		for iNdEx := len(m.FpBtcPkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.FpBtcPkList[iNdEx].Size()
				i -= size
				if _, err := m.FpBtcPkList[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCUndelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCUndelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCUndelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CovenantSlashingSigs) > 0 {
		for iNdEx := len(m.CovenantSlashingSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantSlashingSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DelegatorSlashingSigHex) > 0 {
		i -= len(m.DelegatorSlashingSigHex)
		copy(dAtA[i:], m.DelegatorSlashingSigHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorSlashingSigHex)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SlashingTxHex) > 0 {
		i -= len(m.SlashingTxHex)
		copy(dAtA[i:], m.SlashingTxHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SlashingTxHex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CovenantUnbondingSigList) > 0 {
		for iNdEx := len(m.CovenantUnbondingSigList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantUnbondingSigList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegatorUnbondingSigHex) > 0 {
		i -= len(m.DelegatorUnbondingSigHex)
		copy(dAtA[i:], m.DelegatorUnbondingSigHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorUnbondingSigHex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingTxHex) > 0 {
		i -= len(m.UnbondingTxHex)
		copy(dAtA[i:], m.UnbondingTxHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UnbondingTxHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegatorDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegatorDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegatorDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dels) > 0 {
		for iNdEx := len(m.Dels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x58
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x50
	}
	if m.SlashedBtcHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SlashedBtcHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.SlashedBabylonHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SlashedBabylonHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.RegisteredEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RegisteredEpoch))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MasterPubRand) > 0 {
		i -= len(m.MasterPubRand)
		copy(dAtA[i:], m.MasterPubRand)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MasterPubRand)))
		i--
		dAtA[i] = 0x32
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BabylonPk != nil {
		{
			size, err := m.BabylonPk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsByVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovQuery(uint64(m.Version))
	}
	return n
}

func (m *QueryParamsByVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFinalityProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalityProviders) > 0 {
		for _, e := range m.FinalityProviders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalityProvider != nil {
		l = m.FinalityProvider.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcDelegations) > 0 {
		for _, e := range m.BtcDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderPowerAtHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryFinalityProviderPowerAtHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func (m *QueryFinalityProviderCurrentPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderCurrentPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func (m *QueryActiveFinalityProvidersAtHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveFinalityProvidersAtHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalityProviders) > 0 {
		for _, e := range m.FinalityProviders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActivatedHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActivatedHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryFinalityProviderDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcDelegatorDelegations) > 0 {
		for _, e := range m.BtcDelegatorDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHashHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcDelegation != nil {
		l = m.BtcDelegation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BTCDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.FpBtcPkList) > 0 {
		for _, e := range m.FpBtcPkList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StartHeight != 0 {
		n += 1 + sovQuery(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndHeight))
	}
	if m.TotalSat != 0 {
		n += 1 + sovQuery(uint64(m.TotalSat))
	}
	l = len(m.StakingTxHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SlashingTxHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DelegatorSlashSigHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.CovenantSigs) > 0 {
		for _, e := range m.CovenantSigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StakingOutputIdx != 0 {
		n += 1 + sovQuery(uint64(m.StakingOutputIdx))
	}
	if m.Active {
		n += 2
	}
	l = len(m.StatusDesc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UnbondingTime != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingTime))
	}
	if m.UndelegationResponse != nil {
		l = m.UndelegationResponse.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParamsVersion != 0 {
		n += 1 + sovQuery(uint64(m.ParamsVersion))
	}
	return n
}

func (m *BTCUndelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnbondingTxHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DelegatorUnbondingSigHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.CovenantUnbondingSigList) > 0 {
		for _, e := range m.CovenantUnbondingSigList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.SlashingTxHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DelegatorSlashingSigHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.CovenantSlashingSigs) > 0 {
		for _, e := range m.CovenantSlashingSigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *BTCDelegatorDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dels) > 0 {
		for _, e := range m.Dels {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BabylonPk != nil {
		l = m.BabylonPk.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MasterPubRand)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RegisteredEpoch != 0 {
		n += 1 + sovQuery(uint64(m.RegisteredEpoch))
	}
	if m.SlashedBabylonHeight != 0 {
		n += 1 + sovQuery(uint64(m.SlashedBabylonHeight))
	}
	if m.SlashedBtcHeight != 0 {
		n += 1 + sovQuery(uint64(m.SlashedBtcHeight))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsByVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsByVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsByVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsByVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsByVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsByVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviders = append(m.FinalityProviders, &FinalityProviderResponse{})
			if err := m.FinalityProviders[len(m.FinalityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalityProvider == nil {
				m.FinalityProvider = &FinalityProviderResponse{}
			}
			if err := m.FinalityProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BTCDelegationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegations = append(m.BtcDelegations, &BTCDelegationResponse{})
			if err := m.BtcDelegations[len(m.BtcDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderPowerAtHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderPowerAtHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderPowerAtHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderPowerAtHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderPowerAtHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderPowerAtHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderCurrentPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderCurrentPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderCurrentPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderCurrentPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderCurrentPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderCurrentPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveFinalityProvidersAtHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveFinalityProvidersAtHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveFinalityProvidersAtHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveFinalityProvidersAtHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveFinalityProvidersAtHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveFinalityProvidersAtHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviders = append(m.FinalityProviders, &FinalityProviderWithMeta{})
			if err := m.FinalityProviders[len(m.FinalityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivatedHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivatedHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivatedHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivatedHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivatedHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivatedHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegatorDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegatorDelegations = append(m.BtcDelegatorDelegations, &BTCDelegatorDelegationsResponse{})
			if err := m.BtcDelegatorDelegations[len(m.BtcDelegatorDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcDelegation == nil {
				m.BtcDelegation = &BTCDelegationResponse{}
			}
			if err := m.BtcDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.FpBtcPkList = append(m.FpBtcPkList, v)
			if err := m.FpBtcPkList[len(m.FpBtcPkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSat", wireType)
			}
			m.TotalSat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSlashSigHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSlashSigHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantSigs = append(m.CovenantSigs, &CovenantAdaptorSignatures{})
			if err := m.CovenantSigs[len(m.CovenantSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingOutputIdx", wireType)
			}
			m.StakingOutputIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingOutputIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			m.UnbondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UndelegationResponse == nil {
				m.UndelegationResponse = &BTCUndelegationResponse{}
			}
			if err := m.UndelegationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsVersion", wireType)
			}
			m.ParamsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamsVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCUndelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCUndelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCUndelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorUnbondingSigHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorUnbondingSigHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantUnbondingSigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantUnbondingSigList = append(m.CovenantUnbondingSigList, &SignatureInfo{})
			if err := m.CovenantUnbondingSigList[len(m.CovenantUnbondingSigList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSlashingSigHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorSlashingSigHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantSlashingSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantSlashingSigs = append(m.CovenantSlashingSigs, &CovenantAdaptorSignatures{})
			if err := m.CovenantSlashingSigs[len(m.CovenantSlashingSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegatorDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegatorDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegatorDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dels = append(m.Dels, &BTCDelegationResponse{})
			if err := m.Dels[len(m.Dels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonPk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BabylonPk == nil {
				m.BabylonPk = &secp256k1.PubKey{}
			}
			if err := m.BabylonPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &ProofOfPossession{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPubRand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterPubRand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredEpoch", wireType)
			}
			m.RegisteredEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisteredEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBabylonHeight", wireType)
			}
			m.SlashedBabylonHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBabylonHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBtcHeight", wireType)
			}
			m.SlashedBtcHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBtcHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
