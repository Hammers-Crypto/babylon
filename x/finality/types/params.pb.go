// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/finality/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// signed_blocks_window defines the size of the sliding window for tracking finality provider liveness
	SignedBlocksWindow int64 `protobuf:"varint,1,opt,name=signed_blocks_window,json=signedBlocksWindow,proto3" json:"signed_blocks_window,omitempty"`
	// min_signed_per_window defines the minimum number of blocks that a finality provider is required to sign
	// within the sliding window to avoid being detected as inactive
	MinSignedPerWindow cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=min_signed_per_window,json=minSignedPerWindow,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_signed_per_window"`
	// min_pub_rand is the minimum number of public randomness each
	// message should commit
	MinPubRand uint64 `protobuf:"varint,4,opt,name=min_pub_rand,json=minPubRand,proto3" json:"min_pub_rand,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_25539c9a61c72ee9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSignedBlocksWindow() int64 {
	if m != nil {
		return m.SignedBlocksWindow
	}
	return 0
}

func (m *Params) GetMinPubRand() uint64 {
	if m != nil {
		return m.MinPubRand
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "babylon.finality.v1.Params")
}

func init() { proto.RegisterFile("babylon/finality/v1/params.proto", fileDescriptor_25539c9a61c72ee9) }

var fileDescriptor_25539c9a61c72ee9 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xb1, 0x6a, 0xeb, 0x30,
	0x14, 0x86, 0xad, 0x7b, 0x43, 0x06, 0x93, 0xe5, 0xfa, 0xe6, 0x42, 0x6e, 0x0a, 0x8e, 0xe9, 0x14,
	0x0a, 0xb5, 0x12, 0x0a, 0x1d, 0x3a, 0x86, 0x4c, 0xa5, 0x43, 0x70, 0x87, 0x42, 0x17, 0x23, 0xd9,
	0x8a, 0x23, 0x62, 0xe9, 0x18, 0xcb, 0x4e, 0xea, 0xb7, 0xe8, 0xd8, 0xb1, 0x63, 0xc7, 0x0e, 0x7d,
	0x88, 0x2c, 0x85, 0xd0, 0xa9, 0x74, 0x08, 0x25, 0x19, 0xfa, 0x1a, 0x25, 0xb2, 0x42, 0x17, 0xa1,
	0x5f, 0xdf, 0x7f, 0xce, 0x7f, 0x38, 0xb2, 0x3d, 0x4a, 0x68, 0x95, 0x82, 0xc4, 0x53, 0x2e, 0x49,
	0xca, 0x8b, 0x0a, 0x2f, 0x86, 0x38, 0x23, 0x39, 0x11, 0xca, 0xcf, 0x72, 0x28, 0xc0, 0xf9, 0x6b,
	0x1c, 0xfe, 0xc1, 0xe1, 0x2f, 0x86, 0xdd, 0x76, 0x02, 0x09, 0x68, 0x8e, 0xf7, 0xb7, 0xda, 0xda,
	0xfd, 0x43, 0x04, 0x97, 0x80, 0xf5, 0x69, 0x9e, 0xdc, 0x04, 0x20, 0x49, 0x19, 0xd6, 0x8a, 0x96,
	0x53, 0x1c, 0x97, 0x39, 0x29, 0x38, 0x48, 0xc3, 0xff, 0x47, 0xa0, 0x04, 0xa8, 0xb0, 0xee, 0x55,
	0x8b, 0x1a, 0x1d, 0xbf, 0x22, 0xbb, 0x39, 0xd1, 0x93, 0x38, 0x03, 0xbb, 0xad, 0x78, 0x22, 0x59,
	0x1c, 0xd2, 0x14, 0xa2, 0xb9, 0x0a, 0x97, 0x5c, 0xc6, 0xb0, 0xec, 0x20, 0x0f, 0xf5, 0x7f, 0x07,
	0x4e, 0xcd, 0x46, 0x1a, 0xdd, 0x68, 0xe2, 0x70, 0xfb, 0x9f, 0xe0, 0x32, 0x34, 0x55, 0x19, 0xcb,
	0x0f, 0x25, 0xbf, 0x3c, 0xd4, 0x6f, 0x8d, 0xce, 0x57, 0x9b, 0x9e, 0xf5, 0xb1, 0xe9, 0x1d, 0xd5,
	0x89, 0x2a, 0x9e, 0xfb, 0x1c, 0xb0, 0x20, 0xc5, 0xcc, 0xbf, 0x62, 0x09, 0x89, 0xaa, 0x31, 0x8b,
	0xde, 0x5e, 0x4e, 0x6d, 0x33, 0xd0, 0x98, 0x45, 0x4f, 0x5f, 0xcf, 0x27, 0x28, 0x70, 0x04, 0x97,
	0xd7, 0xba, 0xe7, 0x84, 0xe5, 0x26, 0xca, 0xb3, 0x5b, 0xfb, 0xa8, 0xac, 0xa4, 0x61, 0x4e, 0x64,
	0xdc, 0x69, 0x78, 0xa8, 0xdf, 0x08, 0x6c, 0xc1, 0xe5, 0xa4, 0xa4, 0x01, 0x91, 0xf1, 0x45, 0xe3,
	0xe1, 0xb1, 0x67, 0x8d, 0x2e, 0x57, 0x5b, 0x17, 0xad, 0xb7, 0x2e, 0xfa, 0xdc, 0xba, 0xe8, 0x7e,
	0xe7, 0x5a, 0xeb, 0x9d, 0x6b, 0xbd, 0xef, 0x5c, 0xeb, 0x76, 0x90, 0xf0, 0x62, 0x56, 0x52, 0x3f,
	0x02, 0x81, 0xcd, 0xb6, 0xa3, 0x19, 0xe1, 0xf2, 0x20, 0xf0, 0xdd, 0xcf, 0xf7, 0x14, 0x55, 0xc6,
	0x14, 0x6d, 0xea, 0x15, 0x9d, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x16, 0x3d, 0xd2, 0x36, 0xbf,
	0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinPubRand != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinPubRand))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinSignedPerWindow.Size()
		i -= size
		if _, err := m.MinSignedPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SignedBlocksWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignedBlocksWindow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedBlocksWindow != 0 {
		n += 1 + sovParams(uint64(m.SignedBlocksWindow))
	}
	l = m.MinSignedPerWindow.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MinPubRand != 0 {
		n += 1 + sovParams(uint64(m.MinPubRand))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBlocksWindow", wireType)
			}
			m.SignedBlocksWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBlocksWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSignedPerWindow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSignedPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPubRand", wireType)
			}
			m.MinPubRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPubRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
