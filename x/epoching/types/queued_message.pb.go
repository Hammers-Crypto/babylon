// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/epoching/v1/queued_message.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgType is the type of this queued message
type QueuedMessage_MsgType int32

const (
	QueuedMessage_MSG_CREATE_VALIDATOR            QueuedMessage_MsgType = 0
	QueuedMessage_MSG_DELEGATE                    QueuedMessage_MsgType = 1
	QueuedMessage_MSG_UNDELEGATE                  QueuedMessage_MsgType = 2
	QueuedMessage_MSG_BEGIN_REDELEGATE            QueuedMessage_MsgType = 3
	QueuedMessage_MSG_CANCEL_UNBONDING_DELEGATION QueuedMessage_MsgType = 4
)

var QueuedMessage_MsgType_name = map[int32]string{
	0: "MSG_CREATE_VALIDATOR",
	1: "MSG_DELEGATE",
	2: "MSG_UNDELEGATE",
	3: "MSG_BEGIN_REDELEGATE",
	4: "MSG_CANCEL_UNBONDING_DELEGATION",
}

var QueuedMessage_MsgType_value = map[string]int32{
	"MSG_CREATE_VALIDATOR":            0,
	"MSG_DELEGATE":                    1,
	"MSG_UNDELEGATE":                  2,
	"MSG_BEGIN_REDELEGATE":            3,
	"MSG_CANCEL_UNBONDING_DELEGATION": 4,
}

func (x QueuedMessage_MsgType) String() string {
	return proto.EnumName(QueuedMessage_MsgType_name, int32(x))
}

func (QueuedMessage_MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbb081aaacd53c75, []int{0, 0}
}

// QueuedMessage is a message that can change the validator set and is delayed to the epoch boundary
type QueuedMessage struct {
	// msg_data is the serialised form of this queued message
	MsgData []byte `protobuf:"bytes,1,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`
}

func (m *QueuedMessage) Reset()         { *m = QueuedMessage{} }
func (m *QueuedMessage) String() string { return proto.CompactTextString(m) }
func (*QueuedMessage) ProtoMessage()    {}
func (*QueuedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbb081aaacd53c75, []int{0}
}
func (m *QueuedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedMessage.Merge(m, src)
}
func (m *QueuedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QueuedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedMessage proto.InternalMessageInfo

func (m *QueuedMessage) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.epoching.v1.QueuedMessage_MsgType", QueuedMessage_MsgType_name, QueuedMessage_MsgType_value)
	proto.RegisterType((*QueuedMessage)(nil), "babylon.epoching.v1.QueuedMessage")
}

func init() {
	proto.RegisterFile("babylon/epoching/v1/queued_message.proto", fileDescriptor_dbb081aaacd53c75)
}

var fileDescriptor_dbb081aaacd53c75 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0x4a, 0x4c, 0xaa,
	0xcc, 0xc9, 0xcf, 0xd3, 0x4f, 0x2d, 0xc8, 0x4f, 0xce, 0xc8, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4,
	0x2f, 0x2c, 0x4d, 0x2d, 0x4d, 0x4d, 0x89, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x86, 0xaa, 0xd4, 0x83, 0xa9, 0xd4, 0x2b, 0x33, 0x94, 0x12,
	0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xeb, 0x83, 0x58, 0x10, 0xa5, 0x4a, 0xbb, 0x19, 0xb9, 0x78,
	0x03, 0xc1, 0x66, 0xf8, 0x42, 0x8c, 0x10, 0x92, 0xe4, 0xe2, 0xc8, 0x2d, 0x4e, 0x8f, 0x4f, 0x49,
	0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0xcf, 0x2d, 0x4e, 0x77, 0x49, 0x2c,
	0x49, 0x54, 0xea, 0x60, 0xe4, 0x62, 0xf7, 0x2d, 0x4e, 0x0f, 0xa9, 0x2c, 0x48, 0x15, 0x92, 0xe0,
	0x12, 0xf1, 0x0d, 0x76, 0x8f, 0x77, 0x0e, 0x72, 0x75, 0x0c, 0x71, 0x8d, 0x0f, 0x73, 0xf4, 0xf1,
	0x74, 0x71, 0x0c, 0xf1, 0x0f, 0x12, 0x60, 0x10, 0x12, 0xe0, 0xe2, 0x01, 0xc9, 0xb8, 0xb8, 0xfa,
	0xb8, 0xba, 0x3b, 0x86, 0xb8, 0x0a, 0x30, 0x0a, 0x09, 0x71, 0xf1, 0x81, 0x44, 0x42, 0xfd, 0xe0,
	0x62, 0x4c, 0x30, 0xfd, 0x4e, 0xae, 0xee, 0x9e, 0x7e, 0xf1, 0x41, 0xae, 0x70, 0x19, 0x66, 0x21,
	0x65, 0x2e, 0x79, 0xb0, 0xc9, 0x8e, 0x7e, 0xce, 0xae, 0x3e, 0xf1, 0xa1, 0x7e, 0x4e, 0xfe, 0x7e,
	0x2e, 0x9e, 0x7e, 0x70, 0x03, 0x3d, 0xfd, 0xfd, 0x04, 0x58, 0xac, 0x58, 0x5e, 0x2c, 0x90, 0x67,
	0x74, 0xf2, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27,
	0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x83, 0xf4, 0xcc,
	0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x68, 0x68, 0x24, 0x67, 0x24, 0x66, 0xe6,
	0xc1, 0x38, 0xfa, 0x15, 0x88, 0x60, 0x2c, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x07, 0x88,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x23, 0xf5, 0x90, 0x15, 0x67, 0x01, 0x00, 0x00,
}

func (this *QueuedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueuedMessage)
	if !ok {
		that2, ok := that.(QueuedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MsgData, that1.MsgData) {
		return false
	}
	return true
}
func (m *QueuedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgData) > 0 {
		i -= len(m.MsgData)
		copy(dAtA[i:], m.MsgData)
		i = encodeVarintQueuedMessage(dAtA, i, uint64(len(m.MsgData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueuedMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueuedMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueuedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgData)
	if l > 0 {
		n += 1 + l + sovQueuedMessage(uint64(l))
	}
	return n
}

func sovQueuedMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueuedMessage(x uint64) (n int) {
	return sovQueuedMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueuedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueuedMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueuedMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueuedMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueuedMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgData = append(m.MsgData[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgData == nil {
				m.MsgData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueuedMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueuedMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueuedMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueuedMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueuedMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueuedMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueuedMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueuedMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueuedMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueuedMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueuedMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueuedMessage = fmt.Errorf("proto: unexpected end of group")
)
