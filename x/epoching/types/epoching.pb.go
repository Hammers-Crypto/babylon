// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/epoching/v1/epoching.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BondState int32

const (
	BondState_CREATED   BondState = 0
	BondState_BONDED    BondState = 1
	BondState_UNBONDING BondState = 2
	BondState_UNBONDED  BondState = 3
	BondState_REMOVED   BondState = 4
)

var BondState_name = map[int32]string{
	0: "CREATED",
	1: "BONDED",
	2: "UNBONDING",
	3: "UNBONDED",
	4: "REMOVED",
}

var BondState_value = map[string]int32{
	"CREATED":   0,
	"BONDED":    1,
	"UNBONDING": 2,
	"UNBONDED":  3,
	"REMOVED":   4,
}

func (x BondState) String() string {
	return proto.EnumName(BondState_name, int32(x))
}

func (BondState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{0}
}

type EpochState int32

const (
	EpochState_STARTED   EpochState = 0
	EpochState_ENDED     EpochState = 1
	EpochState_SEALED    EpochState = 2
	EpochState_SUBMITTED EpochState = 3
	EpochState_CONFIRMED EpochState = 4
	EpochState_FINALIZED EpochState = 5
)

var EpochState_name = map[int32]string{
	0: "STARTED",
	1: "ENDED",
	2: "SEALED",
	3: "SUBMITTED",
	4: "CONFIRMED",
	5: "FINALIZED",
}

var EpochState_value = map[string]int32{
	"STARTED":   0,
	"ENDED":     1,
	"SEALED":    2,
	"SUBMITTED": 3,
	"CONFIRMED": 4,
	"FINALIZED": 5,
}

func (x EpochState) String() string {
	return proto.EnumName(EpochState_name, int32(x))
}

func (EpochState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{1}
}

type Epoch struct {
	EpochNumber          uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	CurrentEpochInterval uint64 `protobuf:"varint,2,opt,name=current_epoch_interval,json=currentEpochInterval,proto3" json:"current_epoch_interval,omitempty"`
	FirstBlockHeight     uint64 `protobuf:"varint,3,opt,name=first_block_height,json=firstBlockHeight,proto3" json:"first_block_height,omitempty"`
	// last_block_header is the header of the last block in this epoch.
	// Babylon needs to remember the last header of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised.
	// The last_block_header field is nil in the epoch's beginning, and is set upon the end of this epoch.
	LastBlockHeader *types.Header `protobuf:"bytes,4,opt,name=last_block_header,json=lastBlockHeader,proto3" json:"last_block_header,omitempty"`
	// app_hash_root is the Merkle root of all AppHashs in this epoch
	// It will be used for proving a block is in an epoch
	AppHashRoot []byte `protobuf:"bytes,5,opt,name=app_hash_root,json=appHashRoot,proto3" json:"app_hash_root,omitempty"`
	// sealer_header is the 2nd header of the next epoch
	// This validator set has generated a BLS multisig on `last_commit_hash` of the sealer header
	SealerHeader *types.Header `protobuf:"bytes,6,opt,name=sealer_header,json=sealerHeader,proto3" json:"sealer_header,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *Epoch) GetCurrentEpochInterval() uint64 {
	if m != nil {
		return m.CurrentEpochInterval
	}
	return 0
}

func (m *Epoch) GetFirstBlockHeight() uint64 {
	if m != nil {
		return m.FirstBlockHeight
	}
	return 0
}

func (m *Epoch) GetLastBlockHeader() *types.Header {
	if m != nil {
		return m.LastBlockHeader
	}
	return nil
}

func (m *Epoch) GetAppHashRoot() []byte {
	if m != nil {
		return m.AppHashRoot
	}
	return nil
}

func (m *Epoch) GetSealerHeader() *types.Header {
	if m != nil {
		return m.SealerHeader
	}
	return nil
}

// QueuedMessage is a message that can change the validator set and is delayed to the epoch boundary
type QueuedMessage struct {
	// tx_id is the ID of the tx that contains the message
	TxId []byte `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// msg_id is the original message ID, i.e., hash of the marshaled message
	MsgId []byte `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// block_height is the height when this msg is submitted to Babylon
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// block_time is the timestamp when this msg is submitted to Babylon
	BlockTime *time.Time `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
	// msg is the actual message that is sent by a user and is queued by the epoching module
	//
	// Types that are valid to be assigned to Msg:
	//	*QueuedMessage_MsgCreateValidator
	//	*QueuedMessage_MsgDelegate
	//	*QueuedMessage_MsgUndelegate
	//	*QueuedMessage_MsgBeginRedelegate
	Msg isQueuedMessage_Msg `protobuf_oneof:"msg"`
}

func (m *QueuedMessage) Reset()         { *m = QueuedMessage{} }
func (m *QueuedMessage) String() string { return proto.CompactTextString(m) }
func (*QueuedMessage) ProtoMessage()    {}
func (*QueuedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{1}
}
func (m *QueuedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedMessage.Merge(m, src)
}
func (m *QueuedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QueuedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedMessage proto.InternalMessageInfo

type isQueuedMessage_Msg interface {
	isQueuedMessage_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueuedMessage_MsgCreateValidator struct {
	MsgCreateValidator *types1.MsgCreateValidator `protobuf:"bytes,5,opt,name=msg_create_validator,json=msgCreateValidator,proto3,oneof" json:"msg_create_validator,omitempty"`
}
type QueuedMessage_MsgDelegate struct {
	MsgDelegate *types1.MsgDelegate `protobuf:"bytes,6,opt,name=msg_delegate,json=msgDelegate,proto3,oneof" json:"msg_delegate,omitempty"`
}
type QueuedMessage_MsgUndelegate struct {
	MsgUndelegate *types1.MsgUndelegate `protobuf:"bytes,7,opt,name=msg_undelegate,json=msgUndelegate,proto3,oneof" json:"msg_undelegate,omitempty"`
}
type QueuedMessage_MsgBeginRedelegate struct {
	MsgBeginRedelegate *types1.MsgBeginRedelegate `protobuf:"bytes,8,opt,name=msg_begin_redelegate,json=msgBeginRedelegate,proto3,oneof" json:"msg_begin_redelegate,omitempty"`
}

func (*QueuedMessage_MsgCreateValidator) isQueuedMessage_Msg() {}
func (*QueuedMessage_MsgDelegate) isQueuedMessage_Msg()        {}
func (*QueuedMessage_MsgUndelegate) isQueuedMessage_Msg()      {}
func (*QueuedMessage_MsgBeginRedelegate) isQueuedMessage_Msg() {}

func (m *QueuedMessage) GetMsg() isQueuedMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *QueuedMessage) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *QueuedMessage) GetMsgId() []byte {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *QueuedMessage) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueuedMessage) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

func (m *QueuedMessage) GetMsgCreateValidator() *types1.MsgCreateValidator {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgCreateValidator); ok {
		return x.MsgCreateValidator
	}
	return nil
}

func (m *QueuedMessage) GetMsgDelegate() *types1.MsgDelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgDelegate); ok {
		return x.MsgDelegate
	}
	return nil
}

func (m *QueuedMessage) GetMsgUndelegate() *types1.MsgUndelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgUndelegate); ok {
		return x.MsgUndelegate
	}
	return nil
}

func (m *QueuedMessage) GetMsgBeginRedelegate() *types1.MsgBeginRedelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgBeginRedelegate); ok {
		return x.MsgBeginRedelegate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueuedMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueuedMessage_MsgCreateValidator)(nil),
		(*QueuedMessage_MsgDelegate)(nil),
		(*QueuedMessage_MsgUndelegate)(nil),
		(*QueuedMessage_MsgBeginRedelegate)(nil),
	}
}

type QueuedMessageList struct {
	EpochNumber uint64           `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Msgs        []*QueuedMessage `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (m *QueuedMessageList) Reset()         { *m = QueuedMessageList{} }
func (m *QueuedMessageList) String() string { return proto.CompactTextString(m) }
func (*QueuedMessageList) ProtoMessage()    {}
func (*QueuedMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{2}
}
func (m *QueuedMessageList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedMessageList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedMessageList.Merge(m, src)
}
func (m *QueuedMessageList) XXX_Size() int {
	return m.Size()
}
func (m *QueuedMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedMessageList proto.InternalMessageInfo

func (m *QueuedMessageList) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *QueuedMessageList) GetMsgs() []*QueuedMessage {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type ValStateUpdate struct {
	State       BondState  `protobuf:"varint,1,opt,name=state,proto3,enum=babylon.epoching.v1.BondState" json:"state,omitempty"`
	BlockHeight uint64     `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   *time.Time `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
}

func (m *ValStateUpdate) Reset()         { *m = ValStateUpdate{} }
func (m *ValStateUpdate) String() string { return proto.CompactTextString(m) }
func (*ValStateUpdate) ProtoMessage()    {}
func (*ValStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{3}
}
func (m *ValStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValStateUpdate.Merge(m, src)
}
func (m *ValStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ValStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ValStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ValStateUpdate proto.InternalMessageInfo

func (m *ValStateUpdate) GetState() BondState {
	if m != nil {
		return m.State
	}
	return BondState_CREATED
}

func (m *ValStateUpdate) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValStateUpdate) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

type ValidatorLifecycle struct {
	ValAddr string            `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	ValLife []*ValStateUpdate `protobuf:"bytes,2,rep,name=val_life,json=valLife,proto3" json:"val_life,omitempty"`
}

func (m *ValidatorLifecycle) Reset()         { *m = ValidatorLifecycle{} }
func (m *ValidatorLifecycle) String() string { return proto.CompactTextString(m) }
func (*ValidatorLifecycle) ProtoMessage()    {}
func (*ValidatorLifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{4}
}
func (m *ValidatorLifecycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorLifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorLifecycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorLifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorLifecycle.Merge(m, src)
}
func (m *ValidatorLifecycle) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorLifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorLifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorLifecycle proto.InternalMessageInfo

func (m *ValidatorLifecycle) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *ValidatorLifecycle) GetValLife() []*ValStateUpdate {
	if m != nil {
		return m.ValLife
	}
	return nil
}

type DelegationStateUpdate struct {
	State       BondState  `protobuf:"varint,1,opt,name=state,proto3,enum=babylon.epoching.v1.BondState" json:"state,omitempty"`
	ValAddr     string     `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	BlockHeight uint64     `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   *time.Time `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
}

func (m *DelegationStateUpdate) Reset()         { *m = DelegationStateUpdate{} }
func (m *DelegationStateUpdate) String() string { return proto.CompactTextString(m) }
func (*DelegationStateUpdate) ProtoMessage()    {}
func (*DelegationStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{5}
}
func (m *DelegationStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationStateUpdate.Merge(m, src)
}
func (m *DelegationStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DelegationStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationStateUpdate proto.InternalMessageInfo

func (m *DelegationStateUpdate) GetState() BondState {
	if m != nil {
		return m.State
	}
	return BondState_CREATED
}

func (m *DelegationStateUpdate) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *DelegationStateUpdate) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DelegationStateUpdate) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

type DelegationLifecycle struct {
	DelAddr string                   `protobuf:"bytes,1,opt,name=del_addr,json=delAddr,proto3" json:"del_addr,omitempty"`
	DelLife []*DelegationStateUpdate `protobuf:"bytes,2,rep,name=del_life,json=delLife,proto3" json:"del_life,omitempty"`
}

func (m *DelegationLifecycle) Reset()         { *m = DelegationLifecycle{} }
func (m *DelegationLifecycle) String() string { return proto.CompactTextString(m) }
func (*DelegationLifecycle) ProtoMessage()    {}
func (*DelegationLifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{6}
}
func (m *DelegationLifecycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationLifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationLifecycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationLifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationLifecycle.Merge(m, src)
}
func (m *DelegationLifecycle) XXX_Size() int {
	return m.Size()
}
func (m *DelegationLifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationLifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationLifecycle proto.InternalMessageInfo

func (m *DelegationLifecycle) GetDelAddr() string {
	if m != nil {
		return m.DelAddr
	}
	return ""
}

func (m *DelegationLifecycle) GetDelLife() []*DelegationStateUpdate {
	if m != nil {
		return m.DelLife
	}
	return nil
}

type Validator struct {
	// addr is the validator's address (in sdk.ValAddress)
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// power is the validator's voting power
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{7}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Validator) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type EpochStateUpdate struct {
	State       EpochState `protobuf:"varint,1,opt,name=state,proto3,enum=babylon.epoching.v1.EpochState" json:"state,omitempty"`
	BlockHeight uint64     `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   *time.Time `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
}

func (m *EpochStateUpdate) Reset()         { *m = EpochStateUpdate{} }
func (m *EpochStateUpdate) String() string { return proto.CompactTextString(m) }
func (*EpochStateUpdate) ProtoMessage()    {}
func (*EpochStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{8}
}
func (m *EpochStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStateUpdate.Merge(m, src)
}
func (m *EpochStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EpochStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStateUpdate proto.InternalMessageInfo

func (m *EpochStateUpdate) GetState() EpochState {
	if m != nil {
		return m.State
	}
	return EpochState_STARTED
}

func (m *EpochStateUpdate) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EpochStateUpdate) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

type EpochLifecycle struct {
	EpochNumber uint64              `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	EpochLife   []*EpochStateUpdate `protobuf:"bytes,2,rep,name=epoch_life,json=epochLife,proto3" json:"epoch_life,omitempty"`
}

func (m *EpochLifecycle) Reset()         { *m = EpochLifecycle{} }
func (m *EpochLifecycle) String() string { return proto.CompactTextString(m) }
func (*EpochLifecycle) ProtoMessage()    {}
func (*EpochLifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2f209d5311f84c, []int{9}
}
func (m *EpochLifecycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochLifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochLifecycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochLifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochLifecycle.Merge(m, src)
}
func (m *EpochLifecycle) XXX_Size() int {
	return m.Size()
}
func (m *EpochLifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochLifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_EpochLifecycle proto.InternalMessageInfo

func (m *EpochLifecycle) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochLifecycle) GetEpochLife() []*EpochStateUpdate {
	if m != nil {
		return m.EpochLife
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.epoching.v1.BondState", BondState_name, BondState_value)
	proto.RegisterEnum("babylon.epoching.v1.EpochState", EpochState_name, EpochState_value)
	proto.RegisterType((*Epoch)(nil), "babylon.epoching.v1.Epoch")
	proto.RegisterType((*QueuedMessage)(nil), "babylon.epoching.v1.QueuedMessage")
	proto.RegisterType((*QueuedMessageList)(nil), "babylon.epoching.v1.QueuedMessageList")
	proto.RegisterType((*ValStateUpdate)(nil), "babylon.epoching.v1.ValStateUpdate")
	proto.RegisterType((*ValidatorLifecycle)(nil), "babylon.epoching.v1.ValidatorLifecycle")
	proto.RegisterType((*DelegationStateUpdate)(nil), "babylon.epoching.v1.DelegationStateUpdate")
	proto.RegisterType((*DelegationLifecycle)(nil), "babylon.epoching.v1.DelegationLifecycle")
	proto.RegisterType((*Validator)(nil), "babylon.epoching.v1.Validator")
	proto.RegisterType((*EpochStateUpdate)(nil), "babylon.epoching.v1.EpochStateUpdate")
	proto.RegisterType((*EpochLifecycle)(nil), "babylon.epoching.v1.EpochLifecycle")
}

func init() {
	proto.RegisterFile("babylon/epoching/v1/epoching.proto", fileDescriptor_2f2f209d5311f84c)
}

var fileDescriptor_2f2f209d5311f84c = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0x67, 0x6b, 0x24, 0xb9, 0xca, 0xda, 0x29, 0x54, 0xa3, 0x90, 0x5d, 0x06, 0x01,
	0x0c, 0xa3, 0x20, 0x6b, 0x37, 0xe9, 0xad, 0x2d, 0x24, 0x93, 0xa9, 0x54, 0x58, 0x32, 0x4a, 0xcb,
	0x3e, 0x04, 0x68, 0x89, 0xa5, 0xb8, 0xa6, 0x88, 0x90, 0x5c, 0x82, 0x5c, 0x29, 0xf6, 0xad, 0x8f,
	0x90, 0xe7, 0x28, 0xd0, 0x73, 0x5f, 0xa1, 0x87, 0x1e, 0x72, 0xec, 0xad, 0x85, 0xfd, 0x22, 0xc5,
	0xee, 0x52, 0x7f, 0x8d, 0x10, 0xa7, 0x28, 0xe0, 0x8b, 0xb1, 0x33, 0xf3, 0xcd, 0x37, 0x3b, 0x9f,
	0xbf, 0xa5, 0x0d, 0xaa, 0x83, 0x9d, 0x9b, 0x80, 0x46, 0x3a, 0x89, 0xe9, 0x68, 0xec, 0x47, 0x9e,
	0x3e, 0x3d, 0x9a, 0x9f, 0xb5, 0x38, 0xa1, 0x8c, 0xa2, 0xed, 0x0c, 0xa3, 0xcd, 0xf3, 0xd3, 0xa3,
	0xdd, 0x3d, 0x8f, 0x52, 0x2f, 0x20, 0xba, 0x80, 0x38, 0x93, 0x2b, 0x9d, 0xf9, 0x21, 0x49, 0x19,
	0x0e, 0x63, 0xd9, 0xb5, 0xbb, 0xe3, 0x51, 0x8f, 0x8a, 0xa3, 0xce, 0x4f, 0x59, 0xf6, 0x53, 0x46,
	0x22, 0x97, 0x24, 0xa1, 0x1f, 0x31, 0x9d, 0xdd, 0xc4, 0x24, 0x95, 0x3f, 0xb3, 0xea, 0xde, 0x88,
	0xa6, 0x21, 0x4d, 0xf5, 0x94, 0xe1, 0x57, 0xf2, 0x2e, 0x0e, 0x61, 0xf8, 0x48, 0x67, 0xd7, 0x12,
	0xa0, 0xfe, 0x96, 0x87, 0x92, 0xc9, 0x6f, 0x81, 0x3e, 0x83, 0x9a, 0xb8, 0x8e, 0x1d, 0x4d, 0x42,
	0x87, 0x24, 0x4d, 0x65, 0x5f, 0x39, 0x28, 0x5a, 0x55, 0x91, 0x1b, 0x88, 0x14, 0x7a, 0x06, 0x1f,
	0x8f, 0x26, 0x49, 0x42, 0x22, 0x66, 0x4b, 0xa8, 0x1f, 0x31, 0x92, 0x4c, 0x71, 0xd0, 0xcc, 0x0b,
	0xf0, 0x4e, 0x56, 0x15, 0x84, 0xbd, 0xac, 0x86, 0x3e, 0x07, 0x74, 0xe5, 0x27, 0x29, 0xb3, 0x9d,
	0x80, 0x8e, 0x5e, 0xd9, 0x63, 0xe2, 0x7b, 0x63, 0xd6, 0x2c, 0x88, 0x8e, 0x86, 0xa8, 0x74, 0x78,
	0xa1, 0x2b, 0xf2, 0xc8, 0x80, 0x47, 0x01, 0x5e, 0x02, 0x63, 0x97, 0x24, 0xcd, 0xe2, 0xbe, 0x72,
	0x50, 0x3d, 0x6e, 0x6a, 0x8b, 0x5d, 0x35, 0xb9, 0x65, 0x57, 0xd4, 0xad, 0x8f, 0x78, 0x4b, 0xc6,
	0xc2, 0x13, 0x48, 0x85, 0x3a, 0x8e, 0x63, 0x7b, 0x8c, 0xd3, 0xb1, 0x9d, 0x50, 0xca, 0x9a, 0xa5,
	0x7d, 0xe5, 0xa0, 0x66, 0x55, 0x71, 0x1c, 0x77, 0x71, 0x3a, 0xb6, 0x28, 0x65, 0xe8, 0x6b, 0xa8,
	0xa7, 0x04, 0x07, 0x24, 0x99, 0x4d, 0x29, 0xdf, 0x33, 0xa5, 0x26, 0xe1, 0x32, 0x52, 0x7f, 0x2e,
	0x42, 0xfd, 0x87, 0x09, 0x99, 0x10, 0xb7, 0x4f, 0xd2, 0x14, 0x7b, 0x04, 0x6d, 0x43, 0x89, 0x5d,
	0xdb, 0xbe, 0x2b, 0xa4, 0xab, 0x59, 0x45, 0x76, 0xdd, 0x73, 0xd1, 0x63, 0x28, 0x87, 0xa9, 0xc7,
	0xb3, 0x79, 0x91, 0x2d, 0x85, 0xa9, 0xd7, 0x73, 0xb9, 0xda, 0x6b, 0xe4, 0xa8, 0x3a, 0x4b, 0x4a,
	0x7c, 0x0b, 0x20, 0x21, 0xdc, 0x08, 0x99, 0x04, 0xbb, 0x9a, 0x74, 0x89, 0x36, 0x73, 0x89, 0x36,
	0x9c, 0xb9, 0xa4, 0x53, 0x7c, 0xf3, 0xd7, 0x9e, 0x62, 0x55, 0x44, 0x0f, 0xcf, 0xa2, 0x9f, 0x60,
	0x87, 0x8f, 0x1e, 0x25, 0x04, 0x33, 0x62, 0x4f, 0x71, 0xe0, 0xbb, 0x98, 0xd1, 0x44, 0x68, 0x51,
	0x3d, 0x3e, 0xd4, 0xa4, 0x37, 0xb4, 0xcc, 0x1b, 0x5a, 0xe6, 0x0d, 0xad, 0x9f, 0x7a, 0x27, 0xa2,
	0xe5, 0x72, 0xd6, 0xd1, 0xcd, 0x59, 0x28, 0x7c, 0x27, 0x8b, 0xba, 0x50, 0xe3, 0xfc, 0x2e, 0x09,
	0x88, 0x87, 0x19, 0xc9, 0xf4, 0x7b, 0xf2, 0x1e, 0x5e, 0x23, 0x83, 0x76, 0x73, 0x56, 0x35, 0x5c,
	0x84, 0x68, 0x00, 0x5b, 0x9c, 0x69, 0x12, 0xcd, 0xb9, 0x36, 0x04, 0xd7, 0xd3, 0xf7, 0x70, 0x5d,
	0xcc, 0xc1, 0xdd, 0x9c, 0x55, 0x0f, 0x97, 0x13, 0xb3, 0xcd, 0x1d, 0xe2, 0xf9, 0x91, 0x9d, 0x90,
	0x39, 0xeb, 0xe6, 0xbd, 0x9b, 0x77, 0x78, 0x8b, 0x45, 0x96, 0xa8, 0xf9, 0xe6, 0xff, 0xca, 0x76,
	0x4a, 0x50, 0x08, 0x53, 0x4f, 0x8d, 0xe0, 0xd1, 0x8a, 0x03, 0x4e, 0xfd, 0x94, 0x7d, 0xc8, 0x3b,
	0xfa, 0x0a, 0x8a, 0x61, 0xea, 0xa5, 0xcd, 0xfc, 0x7e, 0xe1, 0xa0, 0x7a, 0xac, 0x6a, 0x6b, 0x3e,
	0x07, 0xda, 0x0a, 0xb1, 0x25, 0xf0, 0xea, 0x2f, 0x0a, 0x6c, 0x5d, 0xe2, 0xe0, 0x9c, 0x61, 0x46,
	0x2e, 0x62, 0x97, 0x6f, 0xfa, 0x0c, 0x4a, 0x29, 0x0f, 0xc5, 0x98, 0xad, 0xe3, 0xd6, 0x5a, 0xae,
	0x0e, 0x8d, 0x5c, 0xd1, 0x64, 0x49, 0xf0, 0x3b, 0xee, 0xcb, 0xdf, 0xe7, 0xbe, 0xc2, 0x7f, 0x76,
	0x9f, 0x4a, 0x01, 0xcd, 0xad, 0x72, 0xea, 0x5f, 0x91, 0xd1, 0xcd, 0x28, 0x20, 0xe8, 0x13, 0xd8,
	0x9c, 0xe2, 0xc0, 0xc6, 0xae, 0x2b, 0x95, 0xa9, 0x58, 0x1b, 0x53, 0x1c, 0xb4, 0x5d, 0x37, 0x41,
	0xdf, 0xc8, 0x52, 0xe0, 0x5f, 0x91, 0x4c, 0x99, 0x27, 0x6b, 0xb7, 0x59, 0x55, 0x40, 0xf4, 0x73,
	0x7e, 0xf5, 0x0f, 0x05, 0x1e, 0x67, 0x8e, 0xf2, 0x69, 0xf4, 0xff, 0x45, 0x5a, 0xbe, 0x6a, 0x7e,
	0xf5, 0xaa, 0x0f, 0xf0, 0x7a, 0xd5, 0xd7, 0xb0, 0xbd, 0xd8, 0x66, 0x45, 0x40, 0x97, 0xac, 0x0a,
	0xe8, 0x12, 0x79, 0x2b, 0x53, 0x96, 0x96, 0x04, 0x3c, 0x5c, 0xbb, 0xe9, 0x5a, 0x91, 0x04, 0x8d,
	0xd0, 0xf1, 0x39, 0x54, 0x16, 0x6f, 0x1c, 0x41, 0x71, 0x3e, 0xaa, 0x66, 0x89, 0x33, 0xda, 0x81,
	0x52, 0x4c, 0x5f, 0x13, 0xa9, 0x4a, 0xc1, 0x92, 0x81, 0xfa, 0xab, 0x02, 0x0d, 0xf1, 0xe1, 0x5f,
	0x56, 0xfe, 0xf9, 0xaa, 0xf2, 0x7b, 0x6b, 0xef, 0xb3, 0xe8, 0x7a, 0x48, 0x7f, 0xde, 0xc0, 0x96,
	0x18, 0xbc, 0x90, 0xf6, 0x03, 0x5e, 0xae, 0x01, 0x20, 0x21, 0x4b, 0x22, 0x3f, 0xbd, 0x67, 0xa9,
	0x4c, 0xdf, 0x0a, 0x99, 0x4d, 0x3b, 0x1c, 0x40, 0x65, 0xee, 0x36, 0x54, 0x85, 0x8d, 0x13, 0xcb,
	0x6c, 0x0f, 0x4d, 0xa3, 0x91, 0x43, 0x00, 0xe5, 0xce, 0xd9, 0xc0, 0x30, 0x8d, 0x86, 0x82, 0xea,
	0x50, 0xb9, 0x18, 0xf0, 0xa8, 0x37, 0xf8, 0xae, 0x91, 0x47, 0x35, 0xd8, 0x94, 0xa1, 0x69, 0x34,
	0x0a, 0xbc, 0xcb, 0x32, 0xfb, 0x67, 0x97, 0xa6, 0xd1, 0x28, 0x1e, 0xfe, 0x08, 0xb0, 0x18, 0xc7,
	0x4b, 0xe7, 0xc3, 0xb6, 0x25, 0x09, 0x2b, 0x50, 0x32, 0x33, 0x3e, 0x80, 0xf2, 0xb9, 0xd9, 0x3e,
	0x35, 0x8d, 0x46, 0x9e, 0x73, 0x9f, 0x5f, 0x74, 0xfa, 0xbd, 0xe1, 0x50, 0xb0, 0xd5, 0xa1, 0x72,
	0x72, 0x36, 0x78, 0xd1, 0xb3, 0xfa, 0x9c, 0x8f, 0x87, 0x2f, 0x7a, 0x83, 0xf6, 0x69, 0xef, 0xa5,
	0x69, 0x34, 0x4a, 0x9d, 0xef, 0x7f, 0xbf, 0x6d, 0x29, 0x6f, 0x6f, 0x5b, 0xca, 0xdf, 0xb7, 0x2d,
	0xe5, 0xcd, 0x5d, 0x2b, 0xf7, 0xf6, 0xae, 0x95, 0xfb, 0xf3, 0xae, 0x95, 0x7b, 0xf9, 0x85, 0xe7,
	0xb3, 0xf1, 0xc4, 0xd1, 0x46, 0x34, 0xd4, 0x33, 0x11, 0x46, 0x63, 0xec, 0x47, 0xb3, 0x40, 0xbf,
	0x5e, 0xfc, 0x1b, 0x24, 0xfe, 0x94, 0x3a, 0x65, 0xf1, 0xab, 0xf9, 0xf2, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0x50, 0x10, 0xd6, 0x27, 0x09, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SealerHeader != nil {
		{
			size, err := m.SealerHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppHashRoot) > 0 {
		i -= len(m.AppHashRoot)
		copy(dAtA[i:], m.AppHashRoot)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.AppHashRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastBlockHeader != nil {
		{
			size, err := m.LastBlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FirstBlockHeight != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.FirstBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentEpochInterval != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.CurrentEpochInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueuedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintEpoching(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedMessage_MsgCreateValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgCreateValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgCreateValidator != nil {
		{
			size, err := m.MsgCreateValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgDelegate != nil {
		{
			size, err := m.MsgDelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgUndelegate != nil {
		{
			size, err := m.MsgUndelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgBeginRedelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgBeginRedelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgBeginRedelegate != nil {
		{
			size, err := m.MsgBeginRedelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpoching(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessageList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedMessageList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessageList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpoching(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintEpoching(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorLifecycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorLifecycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorLifecycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValLife) > 0 {
		for iNdEx := len(m.ValLife) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValLife[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpoching(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintEpoching(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationLifecycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationLifecycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationLifecycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelLife) > 0 {
		for iNdEx := len(m.DelLife) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelLife[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpoching(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DelAddr) > 0 {
		i -= len(m.DelAddr)
		copy(dAtA[i:], m.DelAddr)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.DelAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEpoching(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintEpoching(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochLifecycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochLifecycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochLifecycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochLife) > 0 {
		for iNdEx := len(m.EpochLife) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochLife[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpoching(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpoching(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpoching(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpoching(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEpoching(uint64(m.EpochNumber))
	}
	if m.CurrentEpochInterval != 0 {
		n += 1 + sovEpoching(uint64(m.CurrentEpochInterval))
	}
	if m.FirstBlockHeight != 0 {
		n += 1 + sovEpoching(uint64(m.FirstBlockHeight))
	}
	if m.LastBlockHeader != nil {
		l = m.LastBlockHeader.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	l = len(m.AppHashRoot)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if m.SealerHeader != nil {
		l = m.SealerHeader.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}

func (m *QueuedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEpoching(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovEpoching(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *QueuedMessage_MsgCreateValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgCreateValidator != nil {
		l = m.MsgCreateValidator.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgDelegate != nil {
		l = m.MsgDelegate.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgUndelegate != nil {
		l = m.MsgUndelegate.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgBeginRedelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgBeginRedelegate != nil {
		l = m.MsgBeginRedelegate.Size()
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}
func (m *QueuedMessageList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEpoching(uint64(m.EpochNumber))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovEpoching(uint64(l))
		}
	}
	return n
}

func (m *ValStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEpoching(uint64(m.State))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEpoching(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}

func (m *ValidatorLifecycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if len(m.ValLife) > 0 {
		for _, e := range m.ValLife {
			l = e.Size()
			n += 1 + l + sovEpoching(uint64(l))
		}
	}
	return n
}

func (m *DelegationStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEpoching(uint64(m.State))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEpoching(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}

func (m *DelegationLifecycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelAddr)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if len(m.DelLife) > 0 {
		for _, e := range m.DelLife {
			l = e.Size()
			n += 1 + l + sovEpoching(uint64(l))
		}
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEpoching(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovEpoching(uint64(m.Power))
	}
	return n
}

func (m *EpochStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovEpoching(uint64(m.State))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEpoching(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovEpoching(uint64(l))
	}
	return n
}

func (m *EpochLifecycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEpoching(uint64(m.EpochNumber))
	}
	if len(m.EpochLife) > 0 {
		for _, e := range m.EpochLife {
			l = e.Size()
			n += 1 + l + sovEpoching(uint64(l))
		}
	}
	return n
}

func sovEpoching(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpoching(x uint64) (n int) {
	return sovEpoching(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochInterval", wireType)
			}
			m.CurrentEpochInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBlockHeight", wireType)
			}
			m.FirstBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockHeader == nil {
				m.LastBlockHeader = &types.Header{}
			}
			if err := m.LastBlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHashRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHashRoot = append(m.AppHashRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AppHashRoot == nil {
				m.AppHashRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealerHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SealerHeader == nil {
				m.SealerHeader = &types.Header{}
			}
			if err := m.SealerHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = append(m.TxId[:0], dAtA[iNdEx:postIndex]...)
			if m.TxId == nil {
				m.TxId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = append(m.MsgId[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgId == nil {
				m.MsgId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCreateValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.MsgCreateValidator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgCreateValidator{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.MsgDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgDelegate{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUndelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.MsgUndelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgUndelegate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBeginRedelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.MsgBeginRedelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgBeginRedelegate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedMessageList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedMessageList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedMessageList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &QueuedMessage{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= BondState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorLifecycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorLifecycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorLifecycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValLife", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValLife = append(m.ValLife, &ValStateUpdate{})
			if err := m.ValLife[len(m.ValLife)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= BondState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationLifecycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationLifecycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationLifecycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelLife", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelLife = append(m.DelLife, &DelegationStateUpdate{})
			if err := m.DelLife[len(m.DelLife)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= EpochState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochLifecycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochLifecycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochLifecycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLife", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochLife = append(m.EpochLife, &EpochStateUpdate{})
			if err := m.EpochLife[len(m.EpochLife)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpoching(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpoching
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpoching
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpoching
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpoching
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpoching        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpoching          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpoching = fmt.Errorf("proto: unexpected end of group")
)
