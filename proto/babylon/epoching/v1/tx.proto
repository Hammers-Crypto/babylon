syntax = "proto3";
package babylon.epoching.v1;

import "gogoproto/gogo.proto";
import "cosmos/staking/v1beta1/tx.proto";

option go_package = "github.com/babylonchain/babylon/x/epoching/types";

// Msg defines the Msg service.
service Msg {
  // WrappedDelegate defines a method for performing a delegation of coins from
  // a delegator to a validator.
  rpc WrappedDelegate(MsgWrappedDelegate) returns (MsgWrappedDelegateResponse);

  // WrappedUndelegate defines a method for performing an undelegation from a
  // delegate and a validator.
  rpc WrappedUndelegate(MsgWrappedUndelegate)
      returns (MsgWrappedUndelegateResponse);

  // WrappedBeginRedelegate defines a method for performing a redelegation of
  // coins from a delegator and source validator to a destination validator.
  rpc WrappedBeginRedelegate(MsgWrappedBeginRedelegate)
      returns (MsgWrappedBeginRedelegateResponse);
}

// MsgWrappedDelegate is the message for delegating stakes
message MsgWrappedDelegate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.staking.v1beta1.MsgDelegate msg = 1;
}

// MsgWrappedDelegate is the response to the MsgWrappedDelegate message
message MsgWrappedDelegateResponse {}

// MsgWrappedUndelegate is the message for undelegating stakes
message MsgWrappedUndelegate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.staking.v1beta1.MsgUndelegate msg = 1;
}

// MsgWrappedUndelegateResponse is the response to the MsgWrappedUndelegate
// message
message MsgWrappedUndelegateResponse {}

// MsgWrappedDelegate is the message for moving bonded stakes from a
// validator to another validator
message MsgWrappedBeginRedelegate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.staking.v1beta1.MsgBeginRedelegate msg = 1;
}

// MsgWrappedBeginRedelegateResponse is the response to the
// MsgWrappedBeginRedelegate message
message MsgWrappedBeginRedelegateResponse {}
