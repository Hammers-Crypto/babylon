syntax = "proto3";
package babylon.monitor.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/monitor/params.proto";

option go_package = "github.com/babylonchain/babylon/x/monitor/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/monitor/v1/params";
  }

  // EndedEpochBtcHeight returns the BTC light client height at provided epoch finish
  rpc EndedEpochBtcHeight(QueryEndedEpochBtcHeightRequest) returns (QueryEndedEpochBtcHeightResponse) {
    option (google.api.http).get = "/babylon/monitor/v1/epochs/{epoch_num}";
  }

  // ReportedCheckpointBtcHeight returns the BTC light client height at which the checkpoint with the given hash is reported back to Babylon
  rpc ReportedCheckpointBtcHeight(QueryReportedCheckpointBtcHeightRequest) returns (QueryReportedCheckpointBtcHeightResponse) {
    option (google.api.http).get = "/babylon/monitor/v1/checkpoints/{ckpt_hash}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryEndedEpochBtcHeightRequest {
  uint64 epoch_num = 1;
}

message QueryEndedEpochBtcHeightResponse {
  // height of btc light client when epoch ended
  uint64 btc_light_client_height = 1;
}

message QueryReportedCheckpointBtcHeightRequest {
  // ckpt_hash is hex encoded byte string of the hash of the checkpoint
  string ckpt_hash = 1;
}

message QueryReportedCheckpointBtcHeightResponse {
  // height of btc light client when checkpoint is reported
  uint64 btc_light_client_height = 1;
}
