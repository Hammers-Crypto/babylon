syntax = "proto3";
package babylon.zoneconcierge.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tendermint/types/types.proto";
import "tendermint/crypto/proof.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btccheckpoint/tx.proto";
import "babylon/btccheckpoint/btccheckpoint.proto";
import "babylon/checkpointing/query.proto";
import "babylon/checkpointing/checkpoint.proto";
import "babylon/epoching/v1/epoching.proto";
import "babylon/zoneconcierge/params.proto";
import "babylon/zoneconcierge/zoneconcierge.proto";

option go_package = "github.com/babylonchain/babylon/x/zoneconcierge/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/params";
  }
  // ChainList queries the list of chains that checkpoint to Babylon
  rpc ChainList(QueryChainListRequest) returns (QueryChainListResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/chains";
  }
  // ChainInfo queries the latest info of a chain in Babylon's view
  rpc ChainInfo(QueryChainInfoRequest) returns (QueryChainInfoResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/chain_info/{chain_id}";
  }
  // EpochChainInfo queries the latest info of a chain in a given epoch of Babylon's view
  rpc EpochChainInfo(QueryEpochChainInfoRequest) returns (QueryEpochChainInfoResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/chain_info/{chain_id}/epochs/{epoch_num}";
  }
  // ListHeaders queries the headers of a chain in Babylon's view, with pagination support
  rpc ListHeaders(QueryListHeadersRequest) returns (QueryListHeadersResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/headers/{chain_id}";
  }
  // ListEpochHeaders queries the headers of a chain timestamped in a given epoch of Babylon, with pagination support
  rpc ListEpochHeaders(QueryListEpochHeadersRequest) returns (QueryListEpochHeadersResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/headers/{chain_id}/epochs/{epoch_num}";
  }
  // FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs
  rpc FinalizedChainInfo(QueryFinalizedChainInfoRequest) returns (QueryFinalizedChainInfoResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/finalized_chain_info/{chain_id}";
  }
  // FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than the provided CZ height, with proofs
  rpc FinalizedChainInfoUntilHeight(QueryFinalizedChainInfoUntilHeightRequest) returns (QueryFinalizedChainInfoUntilHeightResponse) {
    option (google.api.http).get = "/babylon/zoneconcierge/v1/finalized_chain_info/{chain_id}/height/{height}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryChainListRequest is request type for the Query/ChainList RPC method
message QueryChainListRequest {}

// QueryChainListResponse is response type for the Query/ChainList RPC method
message QueryChainListResponse {
  repeated string chain_ids = 1;
}

// QueryChainInfoRequest is request type for the Query/ChainInfo RPC method.
message QueryChainInfoRequest {
  string chain_id = 1;
}

// QueryChainInfoResponse is response type for the Query/ChainInfo RPC method.
message QueryChainInfoResponse {
  // chain_info is the info of the CZ
  babylon.zoneconcierge.v1.ChainInfo chain_info = 1;
}

// QueryEpochChainInfoRequest is request type for the Query/EpochChainInfo RPC method.
message QueryEpochChainInfoRequest {
  uint64 epoch_num = 1;
  string chain_id = 2;
}

// QueryEpochChainInfoResponse is response type for the Query/EpochChainInfo RPC method.
message QueryEpochChainInfoResponse {
  // chain_info is the info of the CZ
  babylon.zoneconcierge.v1.ChainInfo chain_info = 1;
}

// QueryListHeadersRequest is request type for the Query/ListHeaders RPC method.
message QueryListHeadersRequest {
  string chain_id = 1;
  // pagination defines whether to have the pagination in the response
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryListHeadersResponse is response type for the Query/ListHeaders RPC method.
message QueryListHeadersResponse {
  // headers is the list of headers
  repeated babylon.zoneconcierge.v1.IndexedHeader headers = 1;
  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryListEpochHeadersRequest is request type for the Query/ListEpochHeaders RPC method.
message QueryListEpochHeadersRequest {
  uint64 epoch_num = 1;
  string chain_id = 2;
}

// QueryListEpochHeadersResponse is response type for the Query/ListEpochHeaders RPC method.
message QueryListEpochHeadersResponse {
  // headers is the list of headers
  repeated babylon.zoneconcierge.v1.IndexedHeader headers = 1;
}

// QueryFinalizedChainInfoRequest is request type for the Query/FinalizedChainInfo RPC method.
message QueryFinalizedChainInfoRequest {
  // chain_id is the ID of the CZ
  string chain_id = 1;
  // prove indicates whether the querier wants to get proofs of this timestamp
  bool prove = 2;
}

// QueryFinalizedChainInfoResponse is response type for the Query/FinalizedChainInfo RPC method.
message QueryFinalizedChainInfoResponse {
  // finalized_chain_info is the info of the CZ
  babylon.zoneconcierge.v1.ChainInfo finalized_chain_info = 1;

  /* 
    The following fields include metadata related to this chain info
  */
  // epoch_info is the metadata of the last BTC-finalised epoch
  babylon.epoching.v1.Epoch epoch_info = 2;
  // raw_checkpoint is the raw checkpoint of this epoch
  babylon.checkpointing.v1.RawCheckpoint raw_checkpoint = 3;
  // btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
  babylon.btccheckpoint.v1.SubmissionKey btc_submission_key = 4;

  /*
    The following fields include proofs that attest the chain info is BTC-finalised
  */
  // proof_tx_in_block is the proof that tx that carries the header is included in a certain Babylon block
  tendermint.types.TxProof proof_tx_in_block = 5;
  // proof_header_in_epoch is the proof that the Babylon header is in a certain epoch
  tendermint.crypto.Proof proof_header_in_epoch = 6;
  // proof_epoch_sealed is the proof that the epoch is sealed
  babylon.zoneconcierge.v1.ProofEpochSealed proof_epoch_sealed = 7;
  // proof_epoch_submitted is the proof that the epoch's checkpoint is included in BTC ledger
  // It is the two TransactionInfo in the best (i.e., earliest) checkpoint submission
  repeated babylon.btccheckpoint.v1.TransactionInfo proof_epoch_submitted = 8;
}

// QueryFinalizedChainInfoUntilHeightRequest is request type for the Query/FinalizedChainInfoUntilHeight RPC method.
message QueryFinalizedChainInfoUntilHeightRequest {
  // chain_id is the ID of the CZ
  string chain_id = 1;
  // height is the height of the CZ chain
  // such that the returned finalised chain info will be no later than this height
  uint64 height = 2;
  // prove indicates whether the querier wants to get proofs of this timestamp
  bool prove = 3;
}

// QueryFinalizedChainInfoUntilHeightResponse is response type for the Query/FinalizedChainInfoUntilHeight RPC method.
message QueryFinalizedChainInfoUntilHeightResponse {
  // finalized_chain_info is the info of the CZ
  babylon.zoneconcierge.v1.ChainInfo finalized_chain_info = 1;

  /* 
    The following fields include metadata related to this chain info
  */
  // epoch_info is the metadata of the last BTC-finalised epoch
  babylon.epoching.v1.Epoch epoch_info = 2;
  // raw_checkpoint is the raw checkpoint of this epoch
  babylon.checkpointing.v1.RawCheckpoint raw_checkpoint = 3;
  // btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
  babylon.btccheckpoint.v1.SubmissionKey btc_submission_key = 4;

  /*
    The following fields include proofs that attest the chain info is BTC-finalised
  */
  // proof_tx_in_block is the proof that tx that carries the header is included in a certain Babylon block
  tendermint.types.TxProof proof_tx_in_block = 5;
  // proof_header_in_epoch is the proof that the Babylon header is in a certain epoch
  tendermint.crypto.Proof proof_header_in_epoch = 6;
  // proof_epoch_sealed is the proof that the epoch is sealed
  babylon.zoneconcierge.v1.ProofEpochSealed proof_epoch_sealed = 7;
  // proof_epoch_submitted is the proof that the epoch's checkpoint is included in BTC ledger
  // It is the two TransactionInfo in the best (i.e., earliest) checkpoint submission
  repeated babylon.btccheckpoint.v1.TransactionInfo proof_epoch_submitted = 8;
}
