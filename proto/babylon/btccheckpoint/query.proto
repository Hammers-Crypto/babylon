syntax = "proto3";
package babylon.btccheckpoint.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btccheckpoint/params.proto";
import "babylon/btccheckpoint/btccheckpoint.proto";

option go_package = "github.com/babylonchain/babylon/x/btccheckpoint/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/params";
  }

  // BtcCheckpointHeightAndHash returns earliest block height and hash for given rawcheckpoint
  rpc BtcCheckpointHeightAndHash(QueryBtcCheckpointHeightAndHashRequest) returns (QueryBtcCheckpointHeightAndHashResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/{epoch_num}";
  }

  // BtcCheckpointsHeightAndHash returns earliest block height and hash for a range of epochs
  rpc BtcCheckpointsHeightAndHash(QueryBtcCheckpointsHeightAndHashRequest) returns (QueryBtcCheckpointsHeightAndHashResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1";
  }

  rpc EpochSubmissions(QueryEpochSubmissionsRequest) returns (QueryEpochSubmissionsResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/{epoch_num}/submissions";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryBtcCheckpointHeightAndHashRequest {
  // Number of epoch for which the earliest checkpointing btc height is requested
  uint64 epoch_num = 1;
}

// QueryBtcCheckpointHeightAndHashResponse is response type for the Query/BtcCheckpointHeightAndHash RPC method
message QueryBtcCheckpointHeightAndHashResponse {
  // Earliest btc block number containing given raw checkpoint
  uint64 earliest_btc_block_number = 1;
  bytes earliest_btc_block_hash = 2;
}

message QueryBtcCheckpointsHeightAndHashRequest {
  // pagination defines whether to have the pagination in the response
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBtcCheckpointsHeightAndHashResponse is response type for the Query/BtcCheckpointsHeightAndHash RPC method
message QueryBtcCheckpointsHeightAndHashResponse {
  repeated uint64 earliest_btc_block_numbers = 1;
  repeated bytes earliest_btc_block_hashes = 2;

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryEpochSubmissionsRequest {
  // Number of epoch for which submissions are requested
  uint64 epoch_num = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryEpochSubmissionsResponse {
  // All submissions saved during an epoch.
  repeated SubmissionKey keys = 1;

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
