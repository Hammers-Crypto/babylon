syntax = "proto3";
package babylonchain.babylon.btccheckpoint;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/babylonchain/babylon/x/btccheckpoint/types";

// Msg defines the Msg service.
service Msg {
  rpc InsertBtcSpvProof(InsertBtcSpvProofRequest) returns (InsertBtcSpvProofResponse);
}

message BtcSpvProof {
  // Valid bitcoin transaction containing OP_RETURN opcode.
  bytes btc_transaction = 1;
  // Index of transaction within the block. Index is needed to determine if
  // currently hashed node is left or right.
  uint32 btc_transaction_index = 2;
  // List of concatenated intermediate merkele tree nodes, without root node and leaf node
  // against which we calculate the proof. 
  // Each node has 32 byte length.
  // Example proof can look like: 32_bytes_of_node1 || 32_bytes_of_node2 ||  32_bytes_of_node3
  // so the length of the proof will always be divisible by 32.
  bytes merkle_nodes = 3;
  // Valid btc header which confirms btc_transaction. 
  // Should have exactly 80 bytes
  bytes confirming_btc_header = 4;
}

message InsertBtcSpvProofRequest {
  BtcSpvProof proof = 1;
}

message InsertBtcSpvProofResponse {}

// this line is used by starport scaffolding # proto/tx/message
