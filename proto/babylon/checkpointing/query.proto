syntax = "proto3";
package babylon.checkpointing.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "babylon/checkpointing/params.proto";
import "babylon/checkpointing/checkpoint.proto";

option go_package = "github.com/babylonchain/babylon/x/checkpointing/types";

// Query defines the gRPC querier service.
service Query {
  // RawCheckpoints queries a list of checkpoints starting from a given epoch number to the current epoch number.
  rpc RawCheckpoints(QueryRawCheckpointsRequest) returns (QueryRawCheckpointsResponse) {
   option (google.api.http).get = "/babylon/checkpointing/v1/raw_checkpoints/{from_epoch_num}";
  }

  // RawCheckpoint queries a checkpoints at a given epoch number.
  rpc RawCheckpoint(QueryRawCheckpointRequest) returns (QueryRawCheckpointResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/raw_checkpoint/{epoch_num}";
  }

  // LatestCheckpoint queries the latest checkpoint.
  rpc LatestCheckpoint(QueryLatestCheckpointRequest) returns (QueryLatestCheckpointResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/latest_checkpoint";
  }

  // UncheckpointedCheckpoints queries a list of checkpoints with the status of UNCHECKPOINTED.
  rpc UncheckpointedCheckpoints(QueryUncheckpointedCheckpointsRequest) returns (QueryUncheckpointedCheckpointsResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/uncheckpointed_checkpoints";
  }

  // UnderconfirmedCheckpoints queries a list of checkpoints with the status of CHECKPOINTED_NOT_CONFIRMED.
  rpc UnderconfirmedCheckpoints(QueryUnderconfirmedCheckpointsRequest) returns (QueryUnderconfirmedCheckpointsResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/underconfirmed_checkpoints";
  }

  // ConfirmedCheckpoints queries a list of checkpoints with the status of CONFIRMED.
  rpc ConfirmedCheckpoints(QueryConfirmedCheckpointsRequest) returns (QueryConfirmedCheckpointsResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/confirmed_checkpoints";
  }

  // BlsSigs queries a list of bls sigs of the validators at a given epoch number.
  rpc BlsSigs(QueryBlsSigsRequest) returns (QueryBlsSigsResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/bls_sigs/{epoch_num}";
  }

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/checkpointing/v1/params";
  }
}

// QueryRawCheckpointsRequest is the request type for the Query/RawCheckpoints
// RPC method.
message QueryRawCheckpointsRequest {
  // from_epoch defines the start epoch of the query, which is inclusive
  int64 from_epoch_num = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryRawCheckpointsResponse is the response type for the Query/RawCheckpoints
// RPC method.
message QueryRawCheckpointsResponse {
  repeated RawCheckpoint raw_checkpoints = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryRawCheckpointRequest is the request type for the Query/RawCheckpoint
// RPC method.
message QueryRawCheckpointRequest {
  // epoch_num defines the epoch for the queried checkpoint
  int64 epoch_num = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryRawCheckpointResponse is the response type for the Query/RawCheckpoint
// RPC method.
message QueryRawCheckpointResponse {
  RawCheckpoint raw_checkpoint = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLatestCheckpointRequest is the request type for the Query/LatestCheckpoint
// RPC method.
message QueryLatestCheckpointRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryLatestCheckpointResponse is the response type for the Query/LatestCheckpoint
// RPC method.
message QueryLatestCheckpointResponse {
  RawCheckpoint latest_checkpoint = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUncheckpointedCheckpointsRequest is the request type for the Query/UncheckpointedCheckpoints
// RPC method.
message QueryUncheckpointedCheckpointsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryUncheckpointedCheckpointsResponse is the response type for the Query/UncheckpointedCheckpoints
// RPC method.
message QueryUncheckpointedCheckpointsResponse {
  repeated RawCheckpoint uncheckpointed_checkpoint = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUnderconfirmedCheckpointsRequest is the request type for the Query/UnderconfirmedCheckpoints
// RPC method.
message QueryUnderconfirmedCheckpointsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryUnderconfirmedCheckpointsResponse is the response type for the Query/UnderconfirmedCheckpoints
// RPC method.
message QueryUnderconfirmedCheckpointsResponse {
  repeated RawCheckpoint underconfirmed_checkpoint = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryConfirmedCheckpointsRequest is the request type for the Query/ConfirmedCheckpoints
// RPC method.
message QueryConfirmedCheckpointsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryConfirmedCheckpointsResponse is the response type for the Query/ConfirmedCheckpoints
// RPC method.
message QueryConfirmedCheckpointsResponse {
  repeated RawCheckpoint confirmed_checkpoint = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBlsSigsRequest is the request type for the Query/BlsSigs
// RPC method.
message QueryBlsSigsRequest {
  // epoch_num defines the epoch for the queried bls sigs
  int64 epoch_num = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBlsSigsResponse is the response type for the Query/BlsSigs
// RPC method.
message QueryBlsSigsResponse {
  repeated BlsSig bls_sigs = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}
