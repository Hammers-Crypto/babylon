syntax = "proto3";
package babylon.checkpointing.v1;

import "gogoproto/gogo.proto";
import "babylon/checkpointing/checkpoint.proto";
import "babylon/checkpointing/bls_key.proto";
import "cosmos/staking/v1beta1/tx.proto";

option go_package = "github.com/babylonchain/babylon/x/checkpointing/types";

// Msg defines the checkpointing Msg service.
service Msg {
  // AddBlsSig defines a method for accumulating BLS signatures
  rpc AddBlsSig(MsgAddBlsSig) returns (MsgAddBlsSigResponse);

  // CreateBlsKey defines a method for registering a BLS key for a validator
  rpc CreateBlsKey(MsgCreateBlsKey) returns (MsgCreateBlsKeyResponse);

  // WrappedCreateValidator defines a method for registering a new validator
  rpc WrappedCreateValidator(MsgWrappedCreateValidator) returns (MsgWrappedCreateValidatorResponse);
}

// MsgAddBlsSig defines a message to add a bls signature from a
// validator
message MsgAddBlsSig {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  BlsSig bls_sig = 1;
}

// MsgAddBlsSigResponse defines the MsgAddBlsSig response type.
message MsgAddBlsSigResponse {}

// MsgCreateBlsKey defines a message to create a BLS key for a validator
message MsgCreateBlsKey {
  BlsPubKey pubkey = 1;
  ProofOfPossession pop = 2;
}

// MsgCreateBlsKeyResponse defines the MsgCreateBlsKey response type
message MsgCreateBlsKeyResponse {}

// MsgWrappedCreateValidator defines a wrapped message to create a validator
message MsgWrappedCreateValidator {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.staking.v1beta1.MsgCreateValidator msg_staking = 1;
  MsgCreateBlsKey msg_checkpointing = 2;
}

// MsgWrappedCreateValidatorResponse defines the MsgWrappedCreateValidator response type
message MsgWrappedCreateValidatorResponse {}
